Source URL: https://developers.google.com/identity/protocols/oauth2?hl=ko

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
홈 [https://developers.google.com/?hl=ko]
제품 [https://developers.google.com/products?hl=ko]
Google Identity [https://developers.google.com/identity?hl=ko]
Google Account Authorization [https://developers.google.com/identity/protocols/oauth2?hl=ko]
의견 보내기
OAuth 2.0을 사용하여 Google API에 액세스하기
bookmark_border
이 페이지의 내용
기본 단계
1. Google API Console에서 OAuth 2.0 사용자 인증 정보를 가져옵니다.
2. Google 승인 서버에서 액세스 토큰을 가져옵니다.
3. 사용자가 부여한 액세스 범위를 검사합니다.
4. 액세스 토큰을 API에 전송합니다.
5. 필요한 경우 액세스 토큰을 새로고침합니다.
시나리오
웹 서버 애플리케이션
참고: Google의 OAuth 2.0 구현 사용은 OAuth 2.0 정책 [https://developers.google.com/identity/protocols/oauth2/policies?hl=ko]의 적용을 받습니다.
Google API는 인증 및 승인에 OAuth 2.0 프로토콜 [https://tools.ietf.org/html/rfc6749]을 사용합니다. Google은 웹 서버, 클라이언트 측, 설치된 애플리케이션, 제한된 입력 기기 애플리케이션 등 일반적인 OAuth 2.0 시나리오를 지원합니다.
먼저 Google API Console [https://console.developers.google.com/?hl=ko]에서 OAuth 2.0 클라이언트 사용자 인증 정보를 가져옵니다. 그런 다음 클라이언트 애플리케이션이 Google 승인 서버에서 액세스 토큰을 요청하고, 응답에서 토큰을 추출하고, 액세스하려는 Google API에 토큰을 전송합니다. 자체 클라이언트 사용자 인증 정보를 사용하는 옵션을 포함하여 Google에 OAuth 2.0을 사용하는 대화형 데모를 보려면 OAuth 2.0 Playground [https://developers.google.com/oauthplayground/?hl=ko]를 사용해 보세요.
이 페이지에서는 Google에서 지원하는 OAuth 2.0 승인 시나리오를 간략히 설명하고 자세한 콘텐츠로 연결되는 링크를 제공합니다. 인증에 OAuth 2.0을 사용하는 방법에 관한 자세한 내용은 OpenID Connect [https://developers.google.com/identity/protocols/oauth2/openid-connect?hl=ko]를 참고하세요.
참고: 구현을 올바르게 수행하는 것의 보안 영향이 크므로 Google의 OAuth 2.0 엔드포인트와 상호작용할 때는 OAuth 2.0 라이브러리를 사용하는 것이 좋습니다. 다른 사용자가 제공하는 디버깅된 코드를 사용하는 것이 좋으며, 이는 개발자와 사용자를 보호하는 데 도움이 됩니다. 자세한 내용은 클라이언트 라이브러리 [https://developers.google.com/identity/protocols/oauth2?hl=ko#libraries]를 참고하세요.
기본 단계
모든 애플리케이션은 OAuth 2.0을 사용하여 Google API에 액세스할 때 기본 패턴을 따릅니다. 대략적으로 다음 다섯 단계를 따릅니다.
1. Google API Console에서 OAuth 2.0 사용자 인증 정보를 가져옵니다.
Google API Console [https://console.developers.google.com/?hl=ko]을 방문하여 Google과 애플리케이션 모두에 알려진 클라이언트 ID 및 클라이언트 보안 비밀번호와 같은 OAuth 2.0 사용자 인증 정보를 획득합니다. 값 집합은 빌드하는 애플리케이션의 유형에 따라 달라집니다. 예를 들어 JavaScript 애플리케이션에는 보안 비밀이 필요하지 않지만 웹 서버 애플리케이션에는 필요합니다.
앱이 실행될 플랫폼에 적합한 OAuth 클라이언트를 만들어야 합니다.
code
서버 측 [https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko] 또는 JavaScript 웹 앱 [https://developers.google.com/identity/protocols/oauth2/javascript-implicit-flow?hl=ko]의 경우 'web' 클라이언트 유형을 사용합니다. 네이티브 앱이나 모바일 앱과 같은 다른 애플리케이션에는 이 클라이언트 유형을 사용하지 마세요.
android
Android 앱 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#android]의 경우 'Android' 클라이언트 유형을 사용합니다.
iOS 및 macOS 앱 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#ios]의 경우 'iOS' 클라이언트 유형을 사용합니다.
grid_view
유니버설 Windows 플랫폼 앱 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#uwp]의 경우 '유니버설 Windows 플랫폼' 클라이언트 유형을 사용합니다.
tv
TV 또는 내장 기기와 같은 입력 제한 기기 [https://developers.google.com/identity/protocols/oauth2/limited-input-device?hl=ko#creatingcred]의 경우 'TV 및 입력 제한 기기' 클라이언트 유형을 사용합니다.
호스트
서버 간 상호작용 [https://developers.google.com/identity/protocols/oauth2/service-account?hl=ko#creatinganaccount]에는 서비스 계정을 사용합니다.
2. Google 승인 서버에서 액세스 토큰을 가져옵니다.
애플리케이션이 Google API를 사용하여 비공개 데이터에 액세스하려면 해당 API에 대한 액세스 권한을 부여하는 액세스 토큰을 획득해야 합니다. 단일 액세스 토큰은 여러 API에 다양한 수준의 액세스 권한을 부여할 수 있습니다. scope라는 변수 매개변수는 액세스 토큰이 허용하는 리소스 및 작업 집합을 제어합니다. 액세스 토큰 요청 중에 애플리케이션은 scope 매개변수에 하나 이상의 값을 전송합니다.
이 요청을 하는 방법은 여러 가지가 있으며, 빌드하는 애플리케이션의 유형에 따라 다릅니다. 예를 들어 JavaScript 애플리케이션은 브라우저 리디렉션을 사용하여 Google에 액세스 토큰을 요청하는 반면 브라우저가 없는 기기에 설치된 애플리케이션은 웹 서비스 요청을 사용합니다.
일부 요청에는 사용자가 Google 계정으로 로그인하는 인증 단계가 필요합니다. 로그인한 후 사용자에게 애플리케이션에서 요청하는 하나 이상의 권한을 부여할지 묻습니다. 이 프로세스를 사용자 동의라고 합니다.
사용자가 하나 이상의 권한을 부여하면 Google 승인 서버는 애플리케이션에 액세스 토큰 (또는 애플리케이션이 액세스 토큰을 획득하는 데 사용할 수 있는 승인 코드)과 해당 토큰으로 부여된 액세스 범위 목록을 전송합니다. 사용자가 권한을 부여하지 않으면 서버에서 오류를 반환합니다.
일반적으로 액세스가 필요한 시점에 미리 요청하는 것보다 점진적으로 범위를 요청하는 것이 좋습니다. 예를 들어 캘린더에 일정을 저장하는 기능을 지원하려는 앱은 사용자가 '캘린더에 추가' 버튼을 누를 때까지 Google Calendar 액세스를 요청해서는 안 됩니다. 점진적 승인 [https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko#incrementalAuth]을 참고하세요.
3. 사용자가 부여한 액세스 범위를 검사합니다.
액세스 토큰 응답에 포함된 범위를 관련 Google API에 대한 액세스에 따라 애플리케이션의 기능 및 기능에 액세스하는 데 필요한 범위와 비교합니다. 관련 API에 액세스하지 않고는 작동할 수 없는 앱의 기능을 사용 중지합니다.
사용자가 요청된 모든 범위를 부여한 경우에도 요청에 포함된 범위가 응답에 포함된 범위와 일치하지 않을 수 있습니다. 액세스에 필요한 범위는 각 Google API의 문서를 참고하세요. API는 여러 범위 문자열 값을 단일 액세스 범위에 매핑하여 요청에 허용된 모든 값에 대해 동일한 범위 문자열을 반환할 수 있습니다. 예: 앱이 https://www.google.com/m8/feeds/ 범위의 승인을 요청한 경우 Google People API가 https://www.googleapis.com/auth/contacts 범위를 반환할 수 있습니다. Google People API 메서드 people.updateContact [https://developers.google.com/people/api/rest/v1/people/updateContact?hl=ko]에는 승인된 https://www.googleapis.com/auth/contacts 범위가 필요합니다.
4. 액세스 토큰을 API에 전송합니다.
애플리케이션이 액세스 토큰을 획득한 후에는 HTTP 승인 요청 헤더 [https://developer.mozilla.org/docs/Web/HTTP/Headers/Authorization]에서 토큰을 Google API로 전송합니다. 토큰을 URI 쿼리 문자열 매개변수로 전송할 수 있지만 URI 매개변수가 완전히 안전하지 않은 로그 파일에 저장될 수 있으므로 권장하지 않습니다. 또한 불필요한 URI 매개변수 이름을 만들지 않는 것이 좋은 REST 사례입니다.
액세스 토큰은 토큰 요청의 scope에 설명된 작업 및 리소스 집합에 대해서만 유효합니다. 예를 들어 Google Calendar API용 액세스 토큰이 발급된 경우 Google Contacts API에 대한 액세스 권한이 부여되지 않습니다. 하지만 유사한 작업을 위해 액세스 토큰을 Google Calendar API에 여러 번 전송할 수 있습니다.
5. 필요한 경우 액세스 토큰을 새로고침합니다.
액세스 토큰의 수명은 제한되어 있습니다. 애플리케이션이 단일 액세스 토큰의 수명을 초과하는 Google API에 액세스해야 하는 경우 갱신 토큰을 획득할 수 있습니다. 갱신 토큰을 사용하면 애플리케이션에서 새 액세스 토큰을 획득할 수 있습니다.
참고: 갱신 토큰을 안전한 장기 저장소에 저장하고 유효한 동안 계속 사용하세요. 제한은 클라이언트-사용자 조합별로 발급되는 갱신 토큰 수와 모든 클라이언트의 사용자별로 발급되는 갱신 토큰 수에 적용되며 이러한 제한은 서로 다릅니다. 애플리케이션에서 한도를 초과하는 갱신 토큰을 요청하면 이전 갱신 토큰이 작동하지 않습니다.
시나리오
웹 서버 애플리케이션
Google OAuth 2.0 엔드포인트는 PHP, Java, Go, Python, Ruby, ASP.NET과 같은 언어와 프레임워크를 사용하는 웹 서버 애플리케이션을 지원합니다.
승인 시퀀스는 애플리케이션이 브라우저를 Google URL로 리디렉션할 때 시작됩니다. URL에는 요청된 액세스 유형을 나타내는 쿼리 매개변수가 포함됩니다. Google은 사용자 인증, 세션 선택, 사용자 동의를 처리합니다. 결과는 승인 코드이며, 애플리케이션은 이를 액세스 토큰 및 갱신 토큰으로 교환할 수 있습니다.
애플리케이션은 나중에 사용할 수 있도록 갱신 토큰을 저장하고 액세스 토큰을 사용하여 Google API에 액세스해야 합니다. 액세스 토큰이 만료되면 애플리케이션은 갱신 토큰을 사용하여 새 토큰을 가져옵니다.
자세한 내용은 웹 서버 애플리케이션용 OAuth 2.0 사용 [https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko]을 참고하세요.
설치된 애플리케이션
Google OAuth 2.0 엔드포인트는 컴퓨터, 휴대기기, 태블릿과 같은 기기에 설치된 애플리케이션을 지원합니다. Google API Console [https://console.developers.google.com/?hl=ko]를 통해 클라이언트 ID를 만들 때 설치된 애플리케이션임을 지정한 다음 애플리케이션 유형으로 Android, Chrome 앱, iOS, Universal Windows Platform (UWP) 또는 데스크톱 앱을 선택합니다.
이 프로세스를 통해 클라이언트 ID와 경우에 따라 클라이언트 보안 비밀번호가 생성되며, 이는 애플리케이션의 소스 코드에 삽입됩니다. (이 컨텍스트에서 클라이언트 보안 비밀은 보안 비밀로 취급되지 않습니다.)
승인 시퀀스는 애플리케이션이 브라우저를 Google URL로 리디렉션할 때 시작됩니다. URL에는 요청된 액세스 유형을 나타내는 쿼리 매개변수가 포함됩니다. Google은 사용자 인증, 세션 선택, 사용자 동의를 처리합니다. 결과는 승인 코드이며, 애플리케이션은 이를 액세스 토큰 및 갱신 토큰으로 교환할 수 있습니다.
애플리케이션은 나중에 사용할 수 있도록 갱신 토큰을 저장하고 액세스 토큰을 사용하여 Google API에 액세스해야 합니다. 액세스 토큰이 만료되면 애플리케이션은 갱신 토큰을 사용하여 새 토큰을 가져옵니다.
자세한 내용은 설치된 애플리케이션에 OAuth 2.0 사용 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko]을 참고하세요.
클라이언트 측 (JavaScript) 애플리케이션
Google OAuth 2.0 엔드포인트는 브라우저에서 실행되는 JavaScript 애플리케이션을 지원합니다.
승인 시퀀스는 애플리케이션이 브라우저를 Google URL로 리디렉션할 때 시작됩니다. URL에는 요청된 액세스 유형을 나타내는 쿼리 매개변수가 포함됩니다. Google은 사용자 인증, 세션 선택, 사용자 동의를 처리합니다.
결과는 액세스 토큰이며, 클라이언트는 Google API 요청에 포함하기 전에 이를 검증해야 합니다. 토큰이 만료되면 애플리케이션에서 이 프로세스를 반복합니다.
자세한 내용은 클라이언트 측 애플리케이션용 OAuth 2.0 사용 [https://developers.google.com/identity/protocols/oauth2/javascript-implicit-flow?hl=ko]을 참고하세요.
입력이 제한된 기기의 애플리케이션
Google OAuth 2.0 엔드포인트는 게임 콘솔, 비디오 카메라, 프린터와 같은 제한된 입력 기기에서 실행되는 애플리케이션을 지원합니다.
승인 시퀀스는 애플리케이션이 승인 코드를 위해 Google URL에 웹 서비스 요청을 하는 것으로 시작됩니다. 응답에는 URL과 애플리케이션이 사용자에게 표시하는 코드 등 여러 매개변수가 포함됩니다.
사용자가 기기에서 URL과 코드를 가져온 다음 입력 기능이 더 풍부한 별도의 기기나 컴퓨터로 전환합니다. 사용자가 브라우저를 실행하고 지정된 URL로 이동하여 로그인하고 코드를 입력합니다.
한편 애플리케이션은 지정된 간격으로 Google URL을 폴링합니다. 사용자가 액세스를 승인하면 Google 서버의 응답에 액세스 토큰과 갱신 토큰이 포함됩니다. 애플리케이션은 나중에 사용할 수 있도록 갱신 토큰을 저장하고 액세스 토큰을 사용하여 Google API에 액세스해야 합니다. 액세스 토큰이 만료되면 애플리케이션은 갱신 토큰을 사용하여 새 토큰을 가져옵니다.
자세한 내용은 기기용 OAuth 2.0 사용 [https://developers.google.com/identity/protocols/oauth2/limited-input-device?hl=ko]을 참고하세요.
서비스 계정
Prediction API 및 Google Cloud Storage와 같은 Google API는 사용자 정보에 액세스하지 않고도 애플리케이션을 대신하여 작동할 수 있습니다. 이러한 상황에서는 애플리케이션이 API에 자체 ID를 증명해야 하지만 사용자 동의는 필요하지 않습니다. 마찬가지로 엔터프라이즈 시나리오에서 애플리케이션은 일부 리소스에 대한 위임된 액세스를 요청할 수 있습니다.
이러한 유형의 서버 간 상호작용에는 개별 최종 사용자가 아닌 애플리케이션에 속한 계정인 서비스 계정이 필요합니다. 애플리케이션이 서비스 계정을 대신하여 Google API를 호출하며 사용자 동의가 필요하지 않습니다. (서비스 계정이 아닌 시나리오에서는 애플리케이션이 최종 사용자를 대신하여 Google API를 호출하며, 사용자 동의가 필요한 경우가 있습니다.)
참고: 이러한 서비스 계정 시나리오에서는 애플리케이션이 JSON 웹 토큰 (JWT)을 만들고 암호화 서명해야 합니다. 이러한 작업을 실행하는 라이브러리를 사용하는 것이 좋습니다. 토큰 생성 및 서명을 추상화하는 라이브러리를 사용하지 않고 이 코드를 작성하면 애플리케이션의 보안에 심각한 영향을 미치는 오류가 발생할 수 있습니다. 이 시나리오를 지원하는 라이브러리 목록은 서비스 계정 문서 [https://developers.google.com/identity/protocols/oauth2/service-account?hl=ko]를 참고하세요.
Google API Console에서 획득하는 서비스 계정의 사용자 인증 정보에는 고유하게 생성된 이메일 주소, 클라이언트 ID, 하나 이상의 공개/비공개 키 쌍이 포함됩니다. 클라이언트 ID와 하나의 비공개 키를 사용하여 서명된 JWT를 만들고 적절한 형식으로 액세스 토큰 요청을 구성합니다. 그런 다음 애플리케이션에서 토큰 요청을 Google OAuth 2.0 승인 서버로 전송하면 액세스 토큰이 반환됩니다. 애플리케이션은 토큰을 사용하여 Google API에 액세스합니다. 토큰이 만료되면 애플리케이션에서 이 프로세스를 반복합니다.
[https://developers.google.com/identity/protocols/oauth2/service-account?hl=ko]
자세한 내용은 서비스 계정 문서 [https://developers.google.com/identity/protocols/oauth2/service-account?hl=ko]를 참고하세요.
참고: Google Workspace 도메인에서 실행되는 애플리케이션에서 서비스 계정을 사용할 수 있지만 서비스 계정은 Google Workspace 계정의 구성원이 아니며 Google Workspace 관리자가 설정한 도메인 정책이 적용되지 않습니다. 예를 들어 Google Workspace 최종 사용자가 도메인 외부에서 문서를 공유하는 기능을 제한하도록 Google Workspace 관리 콘솔에서 설정된 정책은 서비스 계정에는 적용되지 않습니다.
토큰 크기
토큰은 다음 한도까지 크기가 달라질 수 있습니다.
code
승인 코드
256바이트
contextual_token
액세스 토큰
2048바이트
restore_page
갱신 토큰
512바이트
Google Cloud의 보안 토큰 서비스 API [https://cloud.google.com/iam/docs/reference/sts/rest?hl=ko]에서 반환된 액세스 토큰은 Google API OAuth 2.0 액세스 토큰과 유사하게 구성되지만 토큰 크기 제한이 다릅니다. 자세한 내용은 API 문서 [https://cloud.google.com/iam/docs/reference/sts/rest/v1/TopLevel/token?hl=ko#response-body]를 참고하세요.
Google은 이러한 한도 내에서 토큰 크기를 변경할 권리를 보유하며 애플리케이션은 이에 따라 가변 토큰 크기를 지원해야 합니다.
갱신 토큰 만료
부여된 갱신 토큰이 더 이상 작동하지 않을 가능성을 예상하여 코드를 작성해야 합니다. 다음과 같은 이유로 갱신 토큰이 작동하지 않을 수 있습니다.
shield_locked
사용자가 앱의 액세스 권한을 취소 [https://support.google.com/accounts/answer/3466521?hl=ko#remove-access]했습니다.
갱신 토큰이 6개월 동안 사용되지 않았습니다.
사용자가 비밀번호를 변경했고 갱신 토큰에 Gmail 범위가 포함되어 있습니다.
사용자 계정이 부여된 (활성) 새로고침 토큰의 최대 수를 초과했습니다.
사용자가 앱에 시간 제한 액세스 [https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko#time-based-access]를 부여했으며 액세스 권한이 만료되었습니다.
관리자가 앱의 범위에 요청된 서비스 중 하나를 제한됨으로 설정한 경우 [https://support.google.com/a/answer/7281227?hl=ko#restrictaccess] (오류는 admin_policy_enforced임)
cloud_lock
Google Cloud Platform API [https://developers.google.com/identity/protocols/oauth2?hl=ko#gcp]의 경우 관리자가 설정한 세션 길이가 초과되었을 수 있습니다.
외부 사용자 유형으로 구성되고 게시 상태가 '테스트'인 OAuth 동의 화면이 있는 Google Cloud Platform 프로젝트에는 요청된 OAuth 범위가 이름, 이메일 주소, 사용자 프로필 (userinfo.email, userinfo.profile, openid [https://developers.google.com/identity/protocols/oauth2/scopes?hl=ko#oauth2] 범위를 통해 또는 OpenID Connect 동등 항목 [https://developers.google.com/identity/protocols/oauth2/scopes?hl=ko#openid-connect]을 통해)의 하위 집합인 경우를 제외하고 7일 후에 만료되는 갱신 토큰이 발급됩니다.
현재 OAuth 2.0 클라이언트 ID당 Google 계정당 갱신 토큰은 100개로 제한됩니다. 한도에 도달하면 새 갱신 토큰을 만들 때 경고 없이 자동으로 가장 오래된 갱신 토큰을 무효화합니다. 서비스 계정 [https://developers.google.com/identity/protocols/oauth2/service-account?hl=ko]에는 이 한도가 적용되지 않습니다.
또한 사용자 계정 또는 서비스 계정이 모든 클라이언트에서 보유할 수 있는 총 새로고침 토큰 수에 대한 더 큰 제한도 있습니다. 일반적인 사용자는 이 한도를 초과하지 않지만 구현을 테스트하는 데 사용되는 개발자 계정은 초과할 수 있습니다.
여러 프로그램, 머신 또는 기기를 승인해야 하는 경우 Google 계정당 승인하는 클라이언트 수를 15개 또는 20개로 제한하는 것이 한 가지 해결 방법입니다. Google Workspace 관리자 [https://support.google.com/a/answer/172176?hl=ko]인 경우 관리 권한이 있는 사용자를 추가로 만들어 일부 클라이언트를 승인할 수 있습니다.
Google Cloud Platform (GCP) 조직의 세션 관리 정책 처리
GCP 조직의 관리자는 Google Cloud 세션 제어 기능 [https://support.google.com/a/answer/9368756?hl=ko]을 사용하여 사용자가 GCP 리소스에 액세스하는 동안 사용자의 재인증을 자주 요구할 수 있습니다. 이 정책은 Google Cloud Console, Google Cloud SDK [https://cloud.google.com/sdk/gcloud?hl=ko] (gcloud CLI라고도 함), Cloud Platform 범위가 필요한 서드 파티 OAuth 애플리케이션에 대한 액세스에 영향을 미칩니다. 사용자에게 세션 제어 정책이 적용되어 있는 경우 세션 기간이 만료되면 갱신 토큰이 취소된 경우와 마찬가지로 API 호출에 오류가 발생합니다. 호출이 오류 유형 invalid_grant로 실패합니다. error_subtype 필드를 사용하여 취소된 토큰과 세션 제어 정책으로 인한 실패 (예: "error_subtype": "invalid_rapt")를 구분할 수 있습니다. 세션 기간이 매우 제한적일 수 있으므로 (1시간~24시간) 인증 세션을 다시 시작하여 이 시나리오를 원활하게 처리해야 합니다.
마찬가지로 서버 간 배포에 사용자 인증 정보를 사용하거나 사용을 장려해서는 안 됩니다. 사용자 사용자 인증 정보가 장기 실행 작업 또는 작업을 위해 서버에 배포되고 고객이 이러한 사용자에게 세션 제어 정책을 적용하는 경우 세션 기간이 만료될 때 사용자를 다시 인증할 방법이 없으므로 서버 애플리케이션이 실패합니다.
고객이 이 기능을 배포하도록 지원하는 방법에 대한 자세한 내용은 관리자 중심 도움말 [https://support.google.com/a/answer/9368756?hl=ko]을 참고하세요.
클라이언트 라이브러리
다음 클라이언트 라이브러리는 널리 사용되는 프레임워크와 통합되어 OAuth 2.0을 더 간단하게 구현할 수 있습니다. 앞으로 라이브러리에 더 많은 기능이 추가될 예정입니다.
Java용 Google API 클라이언트 라이브러리 [https://developers.google.com/api-client-library/java/google-api-java-client/oauth2?hl=ko]
Python용 Google API 클라이언트 라이브러리 [https://github.com/googleapis/google-api-python-client]
Dart용 Google API 클라이언트 라이브러리 [https://dart.dev/googleapis/]
Go용 Google API 클라이언트 라이브러리 [https://github.com/google/google-api-go-client]
.NET용 Google API 클라이언트 라이브러리 [https://developers.google.com/api-client-library/dotnet/guide/aaa_oauth?hl=ko]
Ruby용 Google API 클라이언트 라이브러리 [https://github.com/googleapis/google-api-ruby-client]
PHP용 Google API 클라이언트 라이브러리 [https://github.com/googleapis/google-api-php-client]
자바스크립트용 Google API 클라이언트 라이브러리 [https://github.com/google/google-api-javascript-client]
GTMAppAuth - Mac 및 iOS용 OAuth 클라이언트 라이브러리 [https://github.com/google/GTMAppAuth]
의견 보내기