Source URL: https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps

YouTube에서 Shorts 동영상의 조회수를 집계하는 방식에 맞게 Data API를 업데이트하고 있습니다. 자세히 알아보기 [https://developers.google.com/youtube/v3/revision_history?hl=ko#march-26,-2025]
이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
홈 [https://developers.google.com/?hl=ko]
제품 [https://developers.google.com/products?hl=ko]
YouTube [https://developers.google.com/youtube?hl=ko]
Data API [https://developers.google.com/youtube/v3?hl=ko]
가이드 [https://developers.google.com/youtube/v3/getting-started?hl=ko]
자바스크립트 웹 애플리케이션에 OAuth 2.0 사용
bookmark_border
이 페이지의 내용
Google API 클라이언트 라이브러리 및 Google ID 서비스 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#gapi-gis]
기본 요건 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#prerequisites]
프로젝트에 API 사용 설정 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#enable-apis]
승인 사용자 인증 정보 만들기 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#creatingcred]
액세스 범위 식별 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#identify-access-scopes]
이 문서에서는 JavaScript 웹 애플리케이션에서 YouTube Data API에 액세스하기 위한 OAuth 2.0 승인을 구현하는 방법을 설명합니다. OAuth 2.0을 사용하면 사용자가 사용자 이름, 비밀번호, 기타 정보를 비공개로 유지하면서 특정 데이터를 애플리케이션과 공유할 수 있습니다. 예를 들어 애플리케이션은 OAuth 2.0을 사용하여 사용자의 YouTube 채널에 동영상을 업로드할 권한을 얻을 수 있습니다.
이 OAuth 2.0 흐름을 암시적 권한 부여 흐름이라고 합니다. 사용자가 애플리케이션에 있는 동안에만 API에 액세스하는 애플리케이션을 위해 설계되었습니다. 이러한 애플리케이션은 기밀 정보를 저장할 수 없습니다.
이 흐름에서 앱은 쿼리 매개변수를 사용하여 앱과 앱에 필요한 API 액세스 유형을 식별하는 Google URL을 엽니다. 현재 브라우저 창이나 팝업에서 URL을 열 수 있습니다. 사용자는 Google로 인증하고 요청된 권한을 부여할 수 있습니다. 그러면 Google에서 사용자를 앱으로 다시 리디렉션합니다. 리디렉션에는 액세스 토큰이 포함되며, 앱은 이를 확인한 후 API 요청을 하는 데 사용합니다.
Google API 클라이언트 라이브러리 및 Google ID 서비스
JavaScript용 Google API 클라이언트 라이브러리 [https://developers.google.com/api-client-library/javascript?hl=ko]를 사용하여 Google에 대한 승인된 호출을 하는 경우 Google ID 서비스 [https://developers.google.com/identity/oauth2/web/guides/overview?hl=ko] JavaScript 라이브러리를 사용하여 OAuth 2.0 흐름을 처리해야 합니다. OAuth 2.0 암시적 부여 흐름을 기반으로 하는 Google ID 서비스의 토큰 모델 [https://developers.google.com/identity/oauth2/web/guides/use-token-model?hl=ko]을 참고하세요.
참고: 구현을 올바르게 수행하는 것의 보안 영향을 고려할 때 Google의 OAuth 2.0 엔드포인트와 상호작용할 때는 Google ID 서비스의 토큰 모델 [https://developers.google.com/identity/oauth2/web/guides/use-token-model?hl=ko]과 같은 OAuth 2.0 라이브러리를 사용하는 것이 좋습니다. 다른 사용자가 제공하는 디버깅된 코드를 사용하는 것이 좋으며, 이는 개발자와 사용자를 보호하는 데 도움이 됩니다.
이 페이지의 나머지 부분에서는 OAuth 2.0 라이브러리를 사용하지 않고 Google의 OAuth 2.0 엔드포인트와 직접 상호작용하는 방법을 자세히 설명합니다.
기본 요건
프로젝트에 API 사용 설정
Google API를 호출하는 애플리케이션은 API Console에서 해당 API를 사용 설정해야 합니다.
프로젝트에서 API를 사용 설정하려면 다음 단계를 따르세요.
Google API Console에서Open the API Library [https://console.developers.google.com/apis/library?hl=ko] 을 사용합니다.
If prompted, select a project, or create a new one.
라이브러리 페이지를 사용하여 YouTube Data API를 찾아 사용 설정합니다. 애플리케이션에서 사용할 다른 API를 찾아 사용 설정합니다.
승인 사용자 인증 정보 만들기
OAuth 2.0을 사용하여 Google API에 액세스하는 애플리케이션에는 Google의 OAuth 2.0 서버에 애플리케이션을 식별하는 승인 사용자 인증 정보가 있어야 합니다. 다음 단계에서는 프로젝트의 사용자 인증 정보를 만드는 방법을 설명합니다. 그러면 애플리케이션에서 사용자 인증 정보를 사용하여 해당 프로젝트에 사용 설정된 API에 액세스할 수 있습니다.
Go to the Credentials page [https://console.developers.google.com/apis/credentials?hl=ko].
클라이언트 만들기를 클릭합니다.
웹 애플리케이션 애플리케이션 유형을 선택합니다.
신고 양식을 작성합니다. JavaScript를 사용하여 승인된 Google API 요청을 보내는 애플리케이션은 승인된 JavaScript 원본을 지정해야 합니다. 출처는 애플리케이션이 OAuth 2.0 서버에 요청을 보낼 수 있는 도메인을 식별합니다. 이러한 출처는 Google의 유효성 검사 규칙 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#origin-validation]을 준수해야 합니다.
액세스 범위 식별
범위를 사용 설정하면 애플리케이션은 필요한 리소스에 대한 액세스만 요청하고 사용자는 애플리케이션에 부여하는 액세스 양을 제어할 수 있습니다. 따라서 요청된 범위 수와 사용자 동의를 얻을 가능성 간에 역관계가 있을 수 있습니다.
OAuth 2.0 승인을 구현하기 전에 앱에서 액세스 권한이 필요한 범위를 지정하는 것이 좋습니다.
YouTube Data API v3는 다음 범위를 사용합니다.
범위 설명
https://www.googleapis.com/auth/youtube YouTube 계정 관리
https://www.googleapis.com/auth/youtube.channel-memberships.creator 현재 활동 중인 채널 회원의 목록과 이들의 현재 등급, 그리고 회원이 된 시기를 확인할 수 있습니다.
https://www.googleapis.com/auth/youtube.force-ssl 내 YouTube 동영상, 평점, 댓글, 캡션의 보기, 수정 및 영구적인 삭제가 가능합니다.
https://www.googleapis.com/auth/youtube.readonly YouTube 계정 보기
https://www.googleapis.com/auth/youtube.upload YouTube 동영상 관리
https://www.googleapis.com/auth/youtubepartner YouTube에서 내 자산과 관련 콘텐츠 조회 및 관리
https://www.googleapis.com/auth/youtubepartner-channel-audit YouTube 파트너 감사 과정 중 관련된 내 YouTube 채널의 비공개 정보 조회
OAuth 2.0 API 범위 [https://developers.google.com/identity/protocols/oauth2/scopes?hl=ko] 문서에는 Google API에 액세스하는 데 사용할 수 있는 전체 범위 목록이 포함되어 있습니다.
공개 애플리케이션에서 특정 사용자 데이터에 대한 액세스를 허용하는 범위를 사용하는 경우 인증 절차를 완료해야 합니다. 애플리케이션을 테스트할 때 화면에 확인되지 않은 앱이 표시되면 확인 요청을 제출하여 이를 삭제해야 합니다. 고객센터에서 인증되지 않은 앱 [https://support.google.com/cloud/answer/7454865?hl=ko]에 대해 자세히 알아보고 앱 인증에 관한 자주 묻는 질문(FAQ) [https://support.google.com/cloud/answer/9110914?hl=ko]에 대한 답변을 확인하세요.
OAuth 2.0 액세스 토큰 가져오기
다음 단계에서는 애플리케이션이 Google의 OAuth 2.0 서버와 상호작용하여 사용자를 대신하여 API 요청을 실행하기 위한 사용자의 동의를 얻는 방법을 보여줍니다. 사용자 승인이 필요한 Google API 요청을 실행하려면 애플리케이션에 해당 동의가 있어야 합니다.
1단계: Google의 OAuth 2.0 서버로 리디렉션
사용자 데이터에 액세스할 권한을 요청하려면 사용자를 Google의 OAuth 2.0 서버로 리디렉션합니다.
--- 탭: OAuth 2.0 엔드포인트 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#oauth-2.0-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8] ---
https://accounts.google.com/o/oauth2/v2/auth에서 Google의 OAuth 2.0 엔드포인트에 액세스를 요청하는 URL을 생성합니다. 이 엔드포인트는 HTTPS를 통해 액세스할 수 있으며 일반 HTTP 연결은 거부됩니다.

        Google 승인 서버는 웹 서버 애플리케이션에 대해 다음 쿼리 문자열 매개변수를 지원합니다.

        
  
    
      매개변수
    
  
  
    
      client_id
      필수
        애플리케이션의 클라이언트 ID입니다. 이 값은 
         에서 확인할 수 있습니다.
        
      
    

    
    
      redirect_uri
      필수
        
        사용자가 승인 흐름을 완료한 후 API 서버가 사용자를 리디렉션하는 위치를 결정합니다. 이 값은 클라이언트의 
         에 구성된 OAuth 2.0 클라이언트의 승인된 리디렉션 URI 중 하나와 정확히 일치해야 합니다. 이 값이 제공된 client_id의 승인된 리디렉션 URI와 일치하지 않으면 redirect_uri_mismatch 오류가 발생합니다.
        http 또는 https 스키마, 케이스, 후행 슬래시('/')는 모두 일치해야 합니다.
          
        
      
    

    

    
      
      
        response_type
        필수
        
        JavaScript 애플리케이션은 매개변수의 값을 token로 설정해야 합니다. 이 값은 Google 승인 서버에 승인 프로세스를 완료한 후 사용자가 리디렉션되는 URI (#)의 프래그먼트 식별자에 액세스 토큰을 name=value 쌍으로 반환하도록 지시합니다.
        
        
      
      
    

    
      scope
      필수
        애플리케이션이 사용자를 대신하여 액세스할 수 있는 리소스를 식별하는 공백으로 구분된 범위 목록입니다. 이러한 값은 Google이 사용자에게 표시하는 동의 화면에 정보를 제공합니다.

        범위를 사용 설정하면 애플리케이션은 필요한 리소스에 대한 액세스만 요청하고 사용자는 애플리케이션에 부여하는 액세스 양을 제어할 수 있습니다. 따라서 요청된 범위의 수와 사용자 동의를 얻을 가능성 사이에는 역관계가 있습니다.
        
        
        


































































































































































































































































































































































































































































































































































































































































































































































































































  
    YouTube Data API v3는 다음 범위를 사용합니다.
  
 
    

  
    
      범위
      설명
    
  
  
    
      https://www.googleapis.com/auth/youtube
      YouTube 계정 관리
    
    
      https://www.googleapis.com/auth/youtube.channel-memberships.creator
      현재 활동 중인 채널 회원의 목록과 이들의 현재 등급, 그리고 회원이 된 시기를 확인할 수 있습니다.
    
    
      https://www.googleapis.com/auth/youtube.force-ssl
      내 YouTube 동영상, 평점, 댓글, 캡션의 보기, 수정 및 영구적인 삭제가 가능합니다.
    
    
      https://www.googleapis.com/auth/youtube.readonly
      YouTube 계정 보기
    
    
      https://www.googleapis.com/auth/youtube.upload
      YouTube 동영상 관리
    
    
      https://www.googleapis.com/auth/youtubepartner
      YouTube에서 내 자산과 관련 콘텐츠 조회 및 관리
    
    
      https://www.googleapis.com/auth/youtubepartner-channel-audit
      YouTube 파트너 감사 과정 중 관련된 내 YouTube 채널의 비공개 정보 조회
    
  

  





        OAuth 2.0 API 범위 [https://developers.google.com/identity/protocols/oauth2/scopes?hl=ko] 문서에는 Google API에 액세스하는 데 사용할 수 있는 범위의 전체 목록이 나와 있습니다.
        
        
        가능한 경우 애플리케이션이 컨텍스트에서 승인 범위에 대한 액세스를 요청하는 것이 좋습니다. 점진적 승인 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#incrementalAuth]을 통해 관련 맥락 안에서 사용자 데이터에 대한 액세스를 요청하면 사용자가 애플리케이션에서 요청하는 액세스가 필요한 이유를 더 쉽게 이해할 수 있습니다.
        
      
    

    

    

    

    
    
      state
      권장
        애플리케이션이 승인 요청과 승인 서버의 응답 간에 상태를 유지하는 데 사용하는 문자열 값을 지정합니다.
          사용자가 애플리케이션의 액세스 요청에 동의하거나 거부하면 서버는 redirect_uri의 URL 프래그먼트 식별자 (#)에서 name=value 쌍으로 전송한 정확한 값을 반환합니다.
        이 매개변수는 사용자를 애플리케이션의 올바른 리소스로 안내하고, nonce를 전송하고, 크로스 사이트 요청 위조를 완화하는 등 여러 용도로 사용할 수 있습니다. redirect_uri는 추측할 수 있으므로 state 값을 사용하면 수신 연결이 인증 요청의 결과임을 더 확실하게 알 수 있습니다. 무작위 문자열을 생성하거나 쿠키 또는 클라이언트의 상태를 캡처하는 다른 값의 해시를 인코딩하는 경우 응답을 검증하여 요청과 응답이 동일한 브라우저에서 시작되었는지 추가로 확인할 수 있으므로 크로스 사이트 요청 위조 [https://datatracker.ietf.org/doc/html/rfc6749#section-10.12]와 같은 공격으로부터 보호할 수 있습니다. state 토큰을 만들고 확인하는 방법의 예는 OpenID Connect [https://developers.google.com/identity/protocols/oauth2/openid-connect?hl=ko#createxsrftoken] 문서를 참고하세요.
        
        
        
          중요: OAuth 클라이언트는 OAuth2 사양 [https://datatracker.ietf.org/doc/html/rfc6749#section-10.12]에 명시된 대로 CSRF를 방지해야 합니다. 이를 달성하는 한 가지 방법은 state 매개변수를 사용하여 승인 요청과 승인 서버의 응답 간에 상태를 유지하는 것입니다.
        
      
    
    

    
    
      include_granted_scopes
      선택사항
        애플리케이션이 단계적 승인을 사용하여 컨텍스트에서 추가 범위에 대한 액세스를 요청할 수 있도록 지원합니다. 이 매개변수의 값을 true로 설정하고 승인 요청이 승인되면 새 액세스 토큰은 사용자가 이전에 애플리케이션 액세스를 승인한 범위도 포함합니다. 예시는 증분 승인 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#incrementalAuth] 섹션을 참고하세요.
        
      
    
    

    
    
      enable_granular_consent
      선택사항
        기본값은 true입니다. false로 설정하면 2019년 이전에 생성된 OAuth 클라이언트 ID에 대해 더 세부적인 Google 계정 권한 [https://developers.google.com/identity/protocols/oauth2/resources/granular-permissions?hl=ko]이 사용 중지됩니다. 더 세분화된 권한이 항상 사용 설정되어 있으므로 최신 OAuth 클라이언트 ID에는 영향을 미치지 않습니다.
        Google에서 애플리케이션의 세부 권한을 사용 설정하면 이 매개변수는 더 이상 영향을 미치지 않습니다.
      
    
    

    
    
      login_hint
      선택사항
        애플리케이션이 인증을 시도하는 사용자를 알고 있는 경우 이 매개변수를 사용하여 Google 인증 서버에 힌트를 제공할 수 있습니다. 서버는 힌트를 사용하여 로그인 양식의 이메일 필드를 미리 입력하거나 적절한 다중 로그인 세션을 선택하여 로그인 흐름을 간소화합니다.
        매개변수 값을 이메일 주소 또는 sub 식별자로 설정합니다. 이는 사용자의 Google ID와 동일합니다.
        
      
    
    

    

    
    
      prompt
      선택사항
        사용자에게 표시할 프롬프트의 공백으로 구분된 대소문자 구분 목록입니다. 이 매개변수를 지정하지 않으면 프로젝트에서 액세스를 요청할 때만 사용자에게 메시지가 표시됩니다. 자세한 내용은 재동의 요청 [https://developers.google.com/identity/protocols/oauth2/openid-connect?hl=ko#re-consent]을 참고하세요.
        

        가능한 값은 다음과 같습니다.
        
          
            none
            인증 또는 동의 화면을 표시하지 않습니다. 다른 값과 함께 지정하면 안 됩니다.
          
          
            consent
            사용자에게 동의를 요청합니다.
          
          
            select_account
            사용자에게 계정을 선택하라는 메시지를 표시합니다.
          
        
      
    
    
  




        Google 승인 서버로 리디렉션하는 샘플

        
아래 샘플 URL은 사용자의 YouTube 계정을 볼 수 있는 액세스를 허용하는 범위에 대한 오프라인 액세스(access_type=offline)를 요청합니다. 증분 승인을 사용하여 새 액세스 토큰이 사용자가 이전에 애플리케이션 액세스 권한을 부여한 모든 범위를 포함하도록 합니다. URL은 필수 redirect_uri, response_type, client_id 매개변수와 state 매개변수의 값도 설정합니다. URL에는 가독성을 위해 줄바꿈과 공백이 포함되어 있습니다.


        https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.readonly&
 include_granted_scopes=true&
 state=state_parameter_passthrough_value&
 redirect_uri=http%3A%2F%2Flocalhost%2Foauth2callback&
 response_type=token&
 client_id=client_id

        요청 URL을 만든 후 사용자를 해당 URL로 리디렉션합니다.

        JavaScript 샘플 코드

        다음 JavaScript 스니펫은 JavaScript용 Google API 클라이언트 라이브러리를 사용하지 않고 JavaScript에서 승인 흐름을 시작하는 방법을 보여줍니다. 이 OAuth 2.0 엔드포인트는 교차 출처 리소스 공유 (CORS)를 지원하지 않으므로 스니펫은 해당 엔드포인트에 대한 요청을 여는 양식을 만듭니다.

        /*
 * Create form to request access token from Google's OAuth 2.0 server.
 */
function oauthSignIn() {
  // Google's OAuth 2.0 endpoint for requesting an access token
  var oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';

  // Create <form> element to submit parameters to OAuth 2.0 endpoint.
  var form = document.createElement('form');
  form.setAttribute('method', 'GET'); // Send as a GET request.
  form.setAttribute('action', oauth2Endpoint);

  // Parameters to pass to OAuth 2.0 endpoint.
  var params = {'client_id': 'YOUR_CLIENT_ID',
                'redirect_uri': 'YOUR_REDIRECT_URI',
                'response_type': 'token',
                'scope': 'https://www.googleapis.com/auth/youtube.force-ssl',
                'include_granted_scopes': 'true',
                'state': 'pass-through value'};

  // Add form parameters as hidden input values.
  for (var p in params) {
    var input = document.createElement('input');
    input.setAttribute('type', 'hidden');
    input.setAttribute('name', p);
    input.setAttribute('value', params[p]);
    form.appendChild(input);
  }

  // Add form to page and submit it to open the OAuth 2.0 endpoint.
  document.body.appendChild(form);
  form.submit();
}
2단계: Google에서 사용자에게 동의를 요청함
이 단계에서 사용자는 애플리케이션에 요청된 액세스 권한을 부여할지 결정합니다. 이 단계에서 Google은 애플리케이션의 이름과 사용자의 승인 사용자 인증 정보에 대한 액세스 권한을 요청하는 Google API 서비스, 부여될 액세스 범위의 요약을 표시하는 동의 창을 표시합니다. 그러면 사용자는 애플리케이션에서 요청한 하나 이상의 범위에 대한 액세스 권한을 부여하는 데 동의하거나 요청을 거부할 수 있습니다.
이 단계에서는 액세스 권한이 부여되었는지 여부를 나타내는 Google의 OAuth 2.0 서버의 응답을 기다리므로 애플리케이션에서 아무것도 하지 않아도 됩니다. 이 응답은 다음 단계에서 설명합니다.
오류
Google의 OAuth 2.0 승인 엔드포인트에 대한 요청에 예상되는 인증 및 승인 흐름 대신 사용자 대상 오류 메시지가 표시될 수 있습니다. 일반적인 오류 코드와 권장 해결 방법은 아래에 나열되어 있습니다.
admin_policy_enforced
Google Workspace 관리자의 정책으로 인해 Google 계정에서 요청된 하나 이상의 범위를 승인할 수 없습니다. 관리자가 OAuth 클라이언트 ID에 대한 액세스 권한이 명시적으로 부여될 때까지 모든 범위 또는 민감하고 제한된 범위에 대한 액세스를 제한하는 방법에 대한 자세한 내용은 Google Workspace 관리자 도움말 Google Workspace 데이터에 액세스할 수 있는 서드 파티 및 내부 앱 제어하기 [https://support.google.com/a/answer/7281227?hl=ko]를 참고하세요.
disallowed_useragent
승인 엔드포인트가 Google의 OAuth 2.0 정책 [https://developers.google.com/identity/protocols/oauth2/policies?hl=ko#browsers]에 의해 허용되지 않는 삽입된 사용자 에이전트 내에 표시됩니다.
--- 탭: Android [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#android] ---
Android 개발자는 android.webkit.WebView [https://developer.android.com/reference/android/webkit/WebView?hl=ko]에서 승인 요청을 열 때 이 오류 메시지가 표시될 수 있습니다.
      개발자는 대신 Google Sign-In for Android [https://developers.google.com/identity/sign-in/android?hl=ko] 또는 OpenID Foundation의 AppAuth for Android [https://openid.github.io/AppAuth-Android/]와 같은 Android 라이브러리를 사용해야 합니다.
    Android 앱이 삽입된 사용자 에이전트에서 일반 웹 링크를 열고 사용자가 사이트에서 Google의 OAuth 2.0 승인 엔드포인트로 이동하면 웹 개발자에게 이 오류가 발생할 수 있습니다. 개발자는 일반 링크가 운영체제의 기본 링크 핸들러에서 열리도록 허용해야 합니다. 여기에는 Android 앱 링크 [https://developer.android.com/training/app-links?hl=ko] 핸들러와 기본 브라우저 앱이 모두 포함됩니다. Android 맞춤 탭 [https://developer.chrome.com/docs/android/custom-tabs/overview/?hl=ko] 라이브러리도 지원되는 옵션입니다.

--- 탭: iOS [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#ios] ---
iOS 및 macOS 개발자는 WKWebView [https://developer.apple.com/documentation/webkit/wkwebview]에서 승인 요청을 열 때 이 오류가 발생할 수 있습니다.
      대신 개발자는 Google Sign-In for iOS [https://developers.google.com/identity/sign-in/ios?hl=ko] 또는 OpenID Foundation의 AppAuth for iOS [https://openid.github.io/AppAuth-iOS/]와 같은 iOS 라이브러리를 사용해야 합니다.
    iOS 또는 macOS 앱이 삽입된 사용자 에이전트에서 일반 웹 링크를 열고 사용자가 사이트에서 Google의 OAuth 2.0 승인 엔드포인트로 이동하면 웹 개발자에게 이 오류가 발생할 수 있습니다. 개발자는 일반 링크가 운영체제의 기본 링크 핸들러에서 열리도록 허용해야 합니다. 여기에는 범용 링크 [https://developer.apple.com/ios/universal-links/] 핸들러와 기본 브라우저 앱이 모두 포함됩니다. SFSafariViewController [https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller] 라이브러리도 지원되는 옵션입니다.
org_internal
요청의 OAuth 클라이언트 ID는 특정 Google Cloud 조직 [https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy?hl=ko#organizations]의 Google 계정에 대한 액세스를 제한하는 프로젝트에 속합니다. 이 구성 옵션에 대한 자세한 내용은 OAuth 동의 화면 설정 도움말의 사용자 유형 [https://support.google.com/cloud/answer/10311615?hl=ko#user-type] 섹션을 참고하세요.
invalid_client
요청이 이루어진 출처가 이 클라이언트에 대해 승인되지 않았습니다. origin_mismatch [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#authorization-errors-origin-mismatch]을 참고하세요.
deleted_client
요청을 만드는 데 사용된 OAuth 클라이언트가 삭제되었습니다. 삭제는 수동으로 이루어질 수도 있고 사용하지 않는 클라이언트 [https://support.google.com/cloud/answer/15549257?hl=ko#unused-client-deletion]의 경우 자동으로 이루어질 수도 있습니다. 삭제된 클라이언트는 삭제 후 30일 이내에 복원할 수 있습니다. 자세히 알아보기 [https://support.google.com/cloud/answer/15549257?hl=ko#delete-oauth-clients]
invalid_grant
점진적 승인 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#incrementalAuth]을 사용하는 경우 토큰이 만료되었거나 무효화되었을 수 있습니다. 사용자를 다시 인증하고 사용자 동의를 요청하여 새 토큰을 획득합니다. 이 오류가 계속 표시되면 애플리케이션이 올바르게 구성되었는지, 요청에 올바른 토큰과 매개변수를 사용하고 있는지 확인하세요. 그렇지 않으면 사용자 계정이 삭제되었거나 사용 중지되었을 수 있습니다.
origin_mismatch
승인 요청을 시작한 JavaScript의 스키마, 도메인 또는 포트가 OAuth 클라이언트 ID에 등록된 승인된 JavaScript 원본 URI와 일치하지 않을 수 있습니다. 에서 승인된 JavaScript 원본을 검토합니다.
redirect_uri_mismatch
승인 요청에 전달된 redirect_uri이 OAuth 클라이언트 ID의 승인된 리디렉션 URI와 일치하지 않습니다. 에서 승인된 리디렉션 URI를 검토합니다.
승인 요청을 시작한 JavaScript의 스키마, 도메인 또는 포트가 OAuth 클라이언트 ID에 등록된 승인된 JavaScript 원본 URI와 일치하지 않을 수 있습니다. 에서 승인된 JavaScript 원본을 검토합니다.
redirect_uri 매개변수는 지원 중단되어 더 이상 지원되지 않는 OAuth 대역 외 (OOB) 흐름을 참조할 수 있습니다. 이전 가이드 [https://developers.google.com/identity/protocols/oauth2/resources/oob-migration?hl=ko]를 참고하여 통합을 업데이트하세요.
invalid_request
요청에 문제가 있습니다. 이 문제는 다음과 같은 여러 이유로 발생할 수 있습니다.
요청의 형식이 올바르지 않습니다.
요청에 필수 매개변수가 누락되었습니다.
요청에서 Google이 지원하지 않는 승인 방법을 사용합니다. OAuth 통합이 권장 통합 방법을 사용하는지 확인
3단계: OAuth 2.0 서버 응답 처리
--- 탭: OAuth 2.0 엔드포인트 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#oauth-2.0-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8] ---
중요:
          OAuth 2.0 응답을 처리하기 전에 Google에서 수신한 state가 승인 요청에서 전송된 state와 일치하는지 확인해야 합니다. 이 확인은 악의적인 스크립트가 아닌 사용자가 요청을 하고 있는지 확인하고 CSRF 공격 [https://datatracker.ietf.org/doc/html/rfc6749#section-10.12]의 위험을 줄이는 데 도움이 됩니다.
        

        OAuth 2.0 서버는 액세스 토큰 요청에 지정된 redirect_uri에 응답을 전송합니다.

        사용자가 요청을 승인하면 응답에 액세스 토큰이 포함됩니다. 사용자가 요청을 승인하지 않으면 응답에 오류 메시지가 포함됩니다. 액세스 토큰 또는 오류 메시지는 아래와 같이 리디렉션 URI의 해시 프래그먼트에 반환됩니다.

        
          액세스 토큰 응답:
            https://oauth2.example.com/callback#access_token=4/P7q7W91&token_type=Bearer&expires_in=3600
            access_token 매개변수 외에도 프래그먼트 문자열에는 항상 Bearer로 설정되는 token_type 매개변수와 토큰의 수명을 초 단위로 지정하는 expires_in 매개변수도 포함됩니다. 액세스 토큰 요청에 state 매개변수가 지정된 경우 해당 값도 응답에 포함됩니다.
          오류 응답:
            https://oauth2.example.com/callback#error=access_denied
          
        

        참고: 애플리케이션은 쿼리 문자열에 포함된 인식할 수 없는 추가 필드를 무시해야 합니다.

        샘플 OAuth 2.0 서버 응답

        
Google Drive의 파일 메타데이터를 보기 위한 읽기 전용 액세스 권한과 Google Calendar 일정을 보기 위한 읽기 전용 액세스 권한을 요청하는 다음 샘플 URL을 클릭하여 이 흐름을 테스트할 수 있습니다.


        https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.readonly&
 include_granted_scopes=true&
 state=state_parameter_passthrough_value&
 redirect_uri=http%3A%2F%2Flocalhost%2Foauth2callback&
 response_type=token&
 client_id=client_id [https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.metadata.readonly+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly&%3Bstate=state_parameter_passthrough_value&%3Bredirect_uri=https%3A%2F%2Foauth2.example.com%2Fcode&%3Bresponse_type=token&%3Bclient_id=583306224539-atbcaa8ne8g85e8kc006o6vmq99qiid0.apps.googleusercontent.com&hl=ko]

        OAuth 2.0 흐름을 완료하면 http://localhost/oauth2callback로 리디렉션됩니다. 로컬 머신이 해당 주소에서 파일을 제공하지 않는 한 해당 URL은 404 NOT FOUND 오류를 생성합니다. 다음 단계에서는 사용자가 애플리케이션으로 다시 리디렉션될 때 URI에 반환되는 정보에 관해 자세히 설명합니다.
4단계: 사용자가 부여한 범위 확인
여러 권한 (범위)을 요청할 때 사용자가 앱에 모든 권한을 부여하지 않을 수 있습니다. 앱은 실제로 부여된 범위를 확인하고 일부 권한이 거부된 상황을 적절하게 처리해야 합니다. 일반적으로 거부된 범위를 사용하는 기능을 사용 중지하여 처리합니다.
하지만 예외도 있습니다. 도메인 전체 권한 위임 [https://support.google.com/a/answer/162106?hl=ko]이 있는 Google Workspace Enterprise 앱 또는 신뢰할 수 있음 [https://support.google.com/a/answer/7281227?hl=ko#zippy=,change-access-from-the-app-list]으로 표시된 앱은 세부 권한 동의 화면을 우회합니다. 이러한 앱의 경우 사용자에게 세부 권한 동의 화면이 표시되지 않습니다. 대신 앱은 요청된 범위를 모두 수신하거나 전혀 수신하지 않습니다.
자세한 내용은 세부 권한 처리 방법 [https://developers.google.com/identity/protocols/oauth2/resources/granular-permissions?hl=ko]을 참고하세요.
--- 탭: OAuth 2.0 엔드포인트 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#oauth-2.0-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8] ---
사용자가 특정 범위에 대한 액세스 권한을 애플리케이션에 부여했는지 확인하려면 액세스 토큰 응답의 scope 필드를 검사합니다. access_token에 의해 부여된 액세스 범위입니다. 공백으로 구분되고 대소문자를 구분하는 문자열 목록으로 표현됩니다.



  예를 들어 다음 샘플 액세스 토큰 응답은 사용자가 애플리케이션에 사용자의 YouTube 동영상, 평점, 댓글, 캡션을 보고, 수정하고, 영구적으로 삭제할 수 있는 권한을 부여했음을 나타냅니다.


  {
    "access_token": "1/fFAGRNJru1FTz70BzhT3Zg",
    "expires_in": 3920,
    "token_type": "Bearer",
    "scope": "https://www.googleapis.com/auth/youtube.force-ssl",
    "refresh_token": "1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI"
  }
Google API 호출
--- 탭: OAuth 2.0 엔드포인트 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#oauth-2.0-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8] ---
애플리케이션이 액세스 토큰을 획득한 후 API에 필요한 액세스 범위가 부여된 경우 토큰을 사용하여 지정된 사용자 계정을 대신하여 Google API를 호출할 수 있습니다. 이렇게 하려면 access_token 쿼리 매개변수 또는 Authorization HTTP 헤더 Bearer 값을 포함하여 API에 대한 요청에 액세스 토큰을 포함합니다. 가능한 경우 HTTP 헤더를 사용하는 것이 좋습니다. 쿼리 문자열은 서버 로그에 표시되는 경향이 있기 때문입니다. 대부분의 경우 클라이언트 라이브러리를 사용하여 Google API 호출을 설정할 수 있습니다 (예: YouTube Data API 호출 [https://developers.google.com/youtube/v3/docs?hl=ko]).



YouTube Data API는 음반사, 영화 제작사와 같이 여러 YouTube 채널을 소유하고 관리하는 YouTube 콘텐츠 소유자의 서비스 계정만 지원합니다.



OAuth 2.0 Playground [https://developers.google.com/oauthplayground/?hl=ko]에서 모든 Google API를 사용해 보고 범위를 확인할 수 있습니다.

HTTP GET 예

Authorization: Bearer HTTP 헤더를 사용하여 youtube.channels [https://developers.google.com/youtube/v3/docs/channels/list?hl=ko] 엔드포인트 (YouTube Data API)를 호출하는 것은 다음과 같습니다. 자체 액세스 토큰을 지정해야 합니다.

GET /youtube/v3/channels?part=snippet&mine=true HTTP/1.1
Host: www.googleapis.com
Authorization: Bearer access_token

다음은 access_token 쿼리 문자열 매개변수를 사용하여 인증된 사용자에 대해 동일한 API를 호출하는 것입니다.

GET https://www.googleapis.com/youtube/v3/channels?access_token=access_token&part=snippet&mine=true

curl 예

curl 명령줄 애플리케이션으로 이러한 명령어를 테스트할 수 있습니다. 다음은 HTTP 헤더 옵션을 사용하는 예입니다 (권장).

curl -H "Authorization: Bearer access_token" https://www.googleapis.com/youtube/v3/channels?part=snippet&mine=true

또는 쿼리 문자열 매개변수 옵션:

curl https://www.googleapis.com/youtube/v3/channels?access_token=access_token&part=snippet&mine=true

        JavaScript 샘플 코드

        아래 코드 스니펫은 CORS (교차 출처 리소스 공유)를 사용하여 Google API에 요청을 보내는 방법을 보여줍니다. 이 예시에서는 JavaScript용 Google API 클라이언트 라이브러리를 사용하지 않습니다.
  하지만 클라이언트 라이브러리를 사용하지 않더라도 해당 라이브러리 문서의 CORS 지원 [https://github.com/google/google-api-javascript-client/blob/master/docs/cors.md] 가이드가 이러한 요청을 더 잘 이해하는 데 도움이 될 수 있습니다.

이 코드 스니펫에서 access_token 변수는 승인된 사용자를 대신하여 API 요청을 수행하기 위해 획득한 토큰을 나타냅니다. 전체 예 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#example]에서는 브라우저의 로컬 스토리지에 토큰을 저장하고 API 요청을 할 때 토큰을 검색하는 방법을 보여줍니다.

var xhr = new XMLHttpRequest();
xhr.open('GET',
    'https://www.googleapis.com/youtube/v3/channels?part=snippet&mine=true&' +
    'access_token=' + params['access_token']);
xhr.onreadystatechange = function (e) {
  console.log(xhr.response);
};
xhr.send(null);
전체 예시
--- 탭: OAuth 2.0 엔드포인트 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#oauth-2.0-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8] ---
이 코드 샘플은 JavaScript용 Google API 클라이언트 라이브러리를 사용하지 않고 JavaScript에서 OAuth 2.0 흐름을 완료하는 방법을 보여줍니다. 이 코드는 API 요청을 시도하는 버튼을 표시하는 HTML 페이지용입니다. 버튼을 클릭하면 코드가 페이지에 브라우저의 로컬 스토리지에 API 액세스 토큰이 저장되어 있는지 확인합니다. 그렇다면 API 요청을 실행합니다. 그렇지 않으면 OAuth 2.0 흐름을 시작합니다.

OAuth 2.0 흐름의 경우 페이지는 다음 단계를 따릅니다.


  사용자를 https://www.googleapis.com/auth/youtube.force-ssl 범위에 대한 액세스를 요청하는 Google의 OAuth 2.0 서버로 안내합니다.
  요청된 하나 이상의 범위에 대한 액세스를 승인 (또는 거부)한 후 사용자는 프래그먼트 식별자 문자열에서 액세스 토큰을 파싱하는 원래 페이지로 리디렉션됩니다.
  이 페이지에서는 사용자가 애플리케이션에 액세스 권한을 부여한 범위를 확인합니다.
  사용자가 요청된 범위에 대한 액세스 권한을 부여한 경우 페이지는 액세스 토큰을 사용하여 샘플 API 요청을 실행합니다.
    
이 API 요청은 YouTube Data API의 channels.list 메서드를 호출하여 승인된 사용자의 YouTube 채널에 관한 데이터를 가져옵니다.

  요청이 성공적으로 실행되면 API 응답이 브라우저의 디버깅 콘솔에 로깅됩니다.


Google 계정의 권한 [https://myaccount.google.com/permissions?hl=ko] 페이지를 통해 앱에 대한 액세스 권한을 취소할 수 있습니다. 앱이 Google API 문서용 OAuth 2.0 데모로 표시됩니다.

이 코드를 로컬에서 실행하려면 인증 사용자 인증 정보 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#creatingcred]에 해당하는 YOUR_CLIENT_ID 및 YOUR_REDIRECT_URI 변수의 값을 설정해야 합니다. YOUR_REDIRECT_URI 변수는 페이지가 제공되는 동일한 URL로 설정해야 합니다. 이 값은 
 에서 구성한 OAuth 2.0 클라이언트의 승인된 리디렉션 URI 중 하나와 정확히 일치해야 합니다. 이 값이 승인된 URI와 일치하지 않으면 redirect_uri_mismatch 오류가 발생합니다. 또한 프로젝트에 이 요청에 대한 적절한 API가 사용 설정 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#enable-apis]되어 있어야 합니다.

<html><head></head><body>
<script>
  var YOUR_CLIENT_ID = 'REPLACE_THIS_VALUE';
  var YOUR_REDIRECT_URI = 'REPLACE_THIS_VALUE';

  // Parse query string to see if page request is coming from OAuth 2.0 server.
  var fragmentString = location.hash.substring(1);
  var params = {};
  var regex = /([^&=]+)=([^&]*)/g, m;
  while (m = regex.exec(fragmentString)) {
    params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
  }
  if (Object.keys(params).length > 0 && params['state']) {
    if (params['state'] == localStorage.getItem('state')) {
      localStorage.setItem('oauth2-test-params', JSON.stringify(params) );

      trySampleRequest();
    } else {
      console.log('State mismatch. Possible CSRF attack');
    }
  }

  // Function to generate a random state value
  function generateCryptoRandomState() {
    const randomValues = new Uint32Array(2);
    window.crypto.getRandomValues(randomValues);

    // Encode as UTF-8
    const utf8Encoder = new TextEncoder();
    const utf8Array = utf8Encoder.encode(
      String.fromCharCode.apply(null, randomValues)
    );

    // Base64 encode the UTF-8 data
    return btoa(String.fromCharCode.apply(null, utf8Array))
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=+$/, '');
  }

  // If there's an access token, try an API request.
  // Otherwise, start OAuth 2.0 flow.
  function trySampleRequest() {
    var params = JSON.parse(localStorage.getItem('oauth2-test-params'));
    if (params && params['access_token']) { 
      var xhr = new XMLHttpRequest();
      xhr.open('GET',
          'https://www.googleapis.com/youtube/v3/channels?part=snippet&mine=true&' +
          'access_token=' + params['access_token']);
      xhr.onreadystatechange = function (e) {
        if (xhr.readyState === 4 && xhr.status === 200) {
          console.log(xhr.response);
        } else if (xhr.readyState === 4 && xhr.status === 401) {
          // Token invalid, so prompt for user permission.
          oauth2SignIn();
        }
      };
      xhr.send(null); 
    } else {
      oauth2SignIn();
    }
  }

  /*
   * Create form to request access token from Google's OAuth 2.0 server.
   */
  function oauth2SignIn() {
    // create random state value and store in local storage
    var state = generateCryptoRandomState();
    localStorage.setItem('state', state);

    // Google's OAuth 2.0 endpoint for requesting an access token
    var oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';

    // Create element to open OAuth 2.0 endpoint in new window.
    var form = document.createElement('form');
    form.setAttribute('method', 'GET'); // Send as a GET request.
    form.setAttribute('action', oauth2Endpoint);

    // Parameters to pass to OAuth 2.0 endpoint.
    var params = {'client_id': YOUR_CLIENT_ID,
                  'redirect_uri': YOUR_REDIRECT_URI,
                  'scope': 'https://www.googleapis.com/auth/youtube.force-ssl',
                  'state': state,
                  'include_granted_scopes': 'true',
                  'response_type': 'token'};

    // Add form parameters as hidden input values.
    for (var p in params) {
      var input = document.createElement('input');
      input.setAttribute('type', 'hidden');
      input.setAttribute('name', p);
      input.setAttribute('value', params[p]);
      form.appendChild(input);
    }

    // Add form to page and submit it to open the OAuth 2.0 endpoint.
    document.body.appendChild(form);
    form.submit();
  }
</script>

<button onclick="trySampleRequest();">Try sample request</button>
</body></html>
JavaScript 출처 유효성 검사 규칙
Google에서는 개발자가 애플리케이션을 안전하게 유지할 수 있도록 다음 유효성 검사 규칙을 JavaScript 출처에 적용합니다. JavaScript 출처는 다음 규칙을 준수해야 합니다. 아래에 언급된 도메인, 호스트, 스킴의 정의는 RFC 3986 섹션 3 [https://tools.ietf.org/html/rfc3986#section-3]을 참고하세요.
유효성 검사 규칙
스키마 [https://tools.ietf.org/html/rfc3986#section-3.1]
JavaScript 출처는 일반 HTTP가 아닌 HTTPS 체계를 사용해야 합니다. 로컬 호스트 URI(로컬 호스트 IP 주소 URI 포함)는 이 규칙에서 제외됩니다.
호스트 [https://tools.ietf.org/html/rfc3986#section-3.2.2]
호스트는 원시 IP 주소일 수 없습니다. 로컬 호스트 IP 주소는 이 규칙에서 제외됩니다.
도메인 [https://tools.ietf.org/html/rfc1034]
호스트 TLD(최상위 도메인 [https://tools.ietf.org/id/draft-liman-tld-names-00.html])는 공개 접미사 목록 [https://publicsuffix.org/list/]에 속해야 합니다.
호스트 도메인은 “googleusercontent.com”일 수 없습니다.
앱이 도메인을 소유하지 않는 한 JavaScript 출처는 URL 단축기 도메인 (예: goo.gl)을 포함할 수 없습니다.
Userinfo [https://tools.ietf.org/html/rfc3986#section-3.2.1]
JavaScript 출처에는 userinfo 하위 구성요소가 포함될 수 없습니다.
경로 [https://tools.ietf.org/html/rfc3986#section-3.3]
JavaScript 출처는 경로 구성요소를 포함할 수 없습니다.
쿼리 [https://tools.ietf.org/html/rfc3986#section-3.4]
JavaScript 출처에는 쿼리 구성요소가 포함될 수 없습니다.
Fragment [https://tools.ietf.org/html/rfc3986#section-3.5]
JavaScript 출처는 프래그먼트 구성요소를 포함할 수 없습니다.
문자 JavaScript 원본에는 다음을 비롯한 특정 문자가 포함될 수 없습니다.
와일드 카드 문자 ('*')
인쇄 불가능한 ASCII 문자
잘못된 퍼센트 인코딩 (퍼센트 기호 뒤에 2자리 16진수가 오는 URL 인코딩 형식을 따르지 않는 퍼센트 인코딩)
Null 문자 (인코딩된 NULL 문자, 예: %00, %C0%80)
점진적 승인
OAuth 2.0 프로토콜에서 앱은 범위로 식별되는 리소스에 액세스할 수 있는 승인을 요청합니다. 필요한 시점에 리소스에 대한 승인을 요청하는 것이 최고의 사용자 환경을 위한 권장사항입니다. 이 방법을 사용 설정하기 위해 Google의 승인 서버는 점진적 승인을 지원합니다. 이 기능을 사용하면 필요에 따라 범위를 요청할 수 있으며, 사용자가 새 범위에 대한 권한을 부여하면 사용자가 프로젝트에 부여한 모든 범위를 포함하는 토큰으로 교환할 수 있는 승인 코드를 반환합니다.
예를 들어 앱이 사용자가 흥미로운 지역 이벤트를 식별하도록 지원한다고 가정해 보겠습니다. 이 앱을 사용하면 사용자가 이벤트에 관한 동영상을 보고, 동영상을 평가하고, 동영상을 재생목록에 추가할 수 있습니다. 사용자는 앱을 사용하여 Google Calendar에 일정을 추가할 수도 있습니다.
이 경우 로그인 시 앱에서 범위를 액세스할 필요가 없거나 액세스를 요청하지 않을 수 있습니다. 하지만 사용자가 동영상을 평가하거나, 동영상을 재생목록에 추가하거나, 다른 YouTube 작업을 실행하려고 하면 앱에서 https://www.googleapis.com/auth/youtube.force-ssl 범위에 대한 액세스를 요청할 수 있습니다. 마찬가지로 사용자가 캘린더 일정을 추가하려고 하면 앱에서 https://www.googleapis.com/auth/calendar 범위에 대한 액세스를 요청할 수 있습니다.
증분 승인에서 획득한 액세스 토큰에는 다음 규칙이 적용됩니다.
이 토큰은 새 결합 승인에 포함된 범위에 해당하는 리소스에 액세스하는 데 사용할 수 있습니다.
결합된 승인에 갱신 토큰을 사용하여 액세스 토큰을 획득하면 액세스 토큰은 결합된 승인을 나타내며 응답에 포함된 scope 값에 사용할 수 있습니다.
결합된 승인에는 승인이 서로 다른 클라이언트에서 요청된 경우에도 사용자가 API 프로젝트에 부여한 모든 범위가 포함됩니다. 예를 들어 사용자가 애플리케이션의 데스크톱 클라이언트를 사용하여 하나의 범위에 대한 액세스 권한을 부여한 다음 모바일 클라이언트를 통해 동일한 애플리케이션에 다른 범위를 부여한 경우 결합된 승인에는 두 범위가 모두 포함됩니다.
결합된 승인을 나타내는 토큰을 취소하면 연결된 사용자를 대신하여 해당 승인의 모든 범위에 대한 액세스 권한이 동시에 취소됩니다.
주의: 부여된 범위를 포함하도록 선택하면 이전에 사용자가 부여한 범위가 승인 요청에 자동으로 추가됩니다. 앱이 현재 응답에서 반환될 수 있는 모든 범위를 요청하도록 승인되지 않은 경우 경고 또는 오류 페이지가 표시될 수 있습니다. 자세한 내용은 인증되지 않은 앱 [https://support.google.com/cloud/answer/7454865?hl=ko]을 참고하세요.
아래 코드 샘플은 기존 액세스 토큰에 범위를 추가하는 방법을 보여줍니다. 이 접근 방식을 사용하면 앱에서 여러 액세스 토큰을 관리하지 않아도 됩니다.
--- 탭: OAuth 2.0 엔드포인트 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#oauth-2.0-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8] ---
이 예시에서 호출 애플리케이션은 사용자가 이미 애플리케이션에 부여한 다른 액세스 권한 외에 사용자의 YouTube 분석 데이터를 가져오는 액세스 권한을 요청합니다.

        

        기존 액세스 토큰에 범위를 추가하려면 Google의 OAuth 2.0 서버에 대한 요청 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#redirecting]에 include_granted_scopes 매개변수를 포함하세요.

다음 코드 스니펫에서는 이 방법을 보여줍니다. 이 스니펫은 액세스 토큰이 유효한 범위를 브라우저의 로컬 스토리지에 저장했다고 가정합니다. 전체 예 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#example] 코드에서는 브라우저의 로컬 스토리지에서 oauth2-test-params.scope 속성을 설정하여 액세스 토큰이 유효한 범위 목록을 저장합니다.

이 스니펫은 액세스 토큰이 유효한 범위를 특정 쿼리에 사용하려는 범위와 비교합니다. 액세스 토큰이 해당 범위를 포함하지 않으면 OAuth 2.0 흐름이 시작됩니다.
  여기서 oauth2SignIn 함수는 2단계 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#redirecting]에서 제공된 함수와 동일합니다 (전체 예시 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#example]에서 나중에 제공됨).

var SCOPE = 'https://www.googleapis.com/auth/youtube.force-ssl';
var params = JSON.parse(localStorage.getItem('oauth2-test-params'));

var current_scope_granted = false;
if (params.hasOwnProperty('scope')) {
  var scopes = params['scope'].split(' ');
  for (var s = 0; s < scopes.length; s++) {
    if (SCOPE == scopes[s]) {
      current_scope_granted = true;
    }
  }
}

if (!current_scope_granted) {
  oauth2SignIn(); // This function is defined elsewhere in this document.
} else {
  // Since you already have access, you can proceed with the API request.
}
토큰 취소
사용자가 애플리케이션에 부여된 액세스 권한을 취소하고 싶어 하는 경우도 있습니다. 사용자는 계정 설정 [https://myaccount.google.com/permissions?hl=ko]을 방문하여 액세스 권한을 취소할 수 있습니다. 자세한 내용은 내 계정에 액세스할 수 있는 서드 파티 사이트 및 앱의 사이트 또는 앱 액세스 권한 삭제 섹션 [https://support.google.com/accounts/answer/3466521?hl=ko#remove-access] 지원 문서를 참고하세요.
애플리케이션이 자신에게 부여된 액세스 권한을 프로그래매틱 방식으로 취소할 수도 있습니다. 프로그래매틱 취소는 사용자가 구독을 취소하거나 애플리케이션을 삭제하거나 앱에 필요한 API 리소스가 크게 변경된 경우에 중요합니다. 즉, 삭제 프로세스의 일부에는 이전에 애플리케이션에 부여된 권한이 삭제되도록 하는 API 요청이 포함될 수 있습니다.
--- 탭: OAuth 2.0 엔드포인트 [https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps?hl=ko#oauth-2.0-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8] ---
프로그래매틱 방식으로 토큰을 취소하려면 애플리케이션이 https://oauth2.googleapis.com/revoke에 요청을 보내고 토큰을 매개변수로 포함합니다.

curl -d -X -POST --header "Content-type:application/x-www-form-urlencoded" \
        https://oauth2.googleapis.com/revoke?token={token}

토큰은 액세스 토큰 또는 갱신 토큰일 수 있습니다. 토큰이 액세스 토큰이고 해당 갱신 토큰이 있는 경우 갱신 토큰도 취소됩니다.


참고: 토큰을 취소하기 위한 Google의 OAuth 2.0 엔드포인트는 JSONP 및 양식 제출을 지원합니다. 교차 출처 리소스 공유 (CORS)는 지원하지 않습니다.


취소가 성공적으로 처리되면 응답의 HTTP 상태 코드는 200입니다. 오류 조건의 경우 오류 코드와 함께 HTTP 상태 코드 400가 반환됩니다.


다음 JavaScript 스니펫은 JavaScript용 Google API 클라이언트 라이브러리를 사용하지 않고 JavaScript에서 토큰을 취소하는 방법을 보여줍니다. 토큰을 취소하기 위한 Google의 OAuth 2.0 엔드포인트는 교차 출처 리소스 공유 (CORS)를 지원하지 않으므로 코드는 XMLHttpRequest() 메서드를 사용하여 요청을 게시하는 대신 양식을 만들어 엔드포인트에 양식을 제출합니다.

function revokeAccess(accessToken) {
  // Google's OAuth 2.0 endpoint for revoking access tokens.
  var revokeTokenEndpoint = 'https://oauth2.googleapis.com/revoke';

  // Create <form> element to use to POST data to the OAuth 2.0 endpoint.
  var form = document.createElement('form');
  form.setAttribute('method', 'post');
  form.setAttribute('action', revokeTokenEndpoint);

  // Add access token to the form so it is set as value of 'token' parameter.
  // This corresponds to the sample curl request, where the URL is:
  //      https://oauth2.googleapis.com/revoke?token={token}
  var tokenField = document.createElement('input');
  tokenField.setAttribute('type', 'hidden');
  tokenField.setAttribute('name', 'token');
  tokenField.setAttribute('value', accessToken);
  form.appendChild(tokenField);

  // Add form to page and submit it to actually revoke the token.
  document.body.appendChild(form);
  form.submit();
}
참고: 취소 응답이 성공한 후 취소가 완전히 적용되기까지 시간이 걸릴 수 있습니다.
계정 간 보안 구현
사용자 계정을 보호하기 위해 취해야 하는 추가 단계는 Google의 교차 계정 보호 서비스를 활용하여 교차 계정 보호를 구현하는 것입니다. 이 서비스를 사용하면 사용자 계정의 주요 변경사항에 관한 정보를 애플리케이션에 제공하는 보안 이벤트 알림을 구독할 수 있습니다. 그런 다음 이 정보를 사용하여 이벤트에 어떻게 대응할지 결정한 후 조치를 취할 수 있습니다.
Google의 교차 계정 보호 서비스에서 앱으로 전송하는 이벤트 유형의 예는 다음과 같습니다.
https://schemas.openid.net/secevent/risc/event-type/sessions-revoked
https://schemas.openid.net/secevent/oauth/event-type/token-revoked
https://schemas.openid.net/secevent/risc/event-type/account-disabled
교차 계정 보호를 구현하는 방법과 사용 가능한 이벤트의 전체 목록은 교차 계정 보호로 사용자 계정 보호 페이지 [https://developers.google.com/identity/protocols/risc?hl=ko]를 참고하세요.