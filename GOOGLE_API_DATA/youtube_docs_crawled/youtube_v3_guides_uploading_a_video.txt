Source URL: https://developers.google.com/youtube/v3/guides/uploading_a_video

YouTube에서 Shorts 동영상의 조회수를 집계하는 방식에 맞게 Data API를 업데이트하고 있습니다. 자세히 알아보기 [https://developers.google.com/youtube/v3/revision_history?hl=ko#march-26,-2025]
이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
홈 [https://developers.google.com/?hl=ko]
제품 [https://developers.google.com/products?hl=ko]
YouTube [https://developers.google.com/youtube?hl=ko]
Data API [https://developers.google.com/youtube/v3?hl=ko]
가이드 [https://developers.google.com/youtube/v3/getting-started?hl=ko]
동영상 업로드
bookmark_border
이 페이지의 내용
요구사항
샘플 요청
스크립트 호출
샘플 코드
추가 리소스
이 가이드에서는 YouTube Data API를 사용하여 YouTube 동영상을 업로드하는 Python 스크립트를 제공하고 설명합니다. 이 코드는 Python용 Google API 클라이언트 라이브러리를 사용합니다. (기타 많이 사용되는 프로그래밍 언어의 클라이언트 라이브러리도 제공됩니다.)
참고: 샘플 스크립트는 오류를 처리하지 않습니다.
요구사항
Python 2.5 이상
Python용 Google API 클라이언트 라이브러리 [https://developers.google.com/api-client-library/python/start/installation?hl=ko] (google-api-python-client)를 설치합니다.
OAuth 2.0 [http://oauth.net/2/] 프로토콜을 사용하여 사용자 데이터에 대한 액세스를 승인할 수 있도록 Google에 애플리케이션을 등록 [https://developers.google.com/youtube/registering_an_application?hl=ko]합니다.
이 스크립트에서 OAuth 2.0 단계를 사용하려면 API Console [https://console.cloud.google.com/?hl=ko]의 정보가 포함된 client_secrets.json 파일을 만들어야 합니다. 이 파일은 스크립트와 같은 디렉토리에 있어야 합니다.
{
  "web": {
    "client_id": "[[INSERT CLIENT ID HERE]]",
    "client_secret": "[[INSERT CLIENT SECRET HERE]]",
    "redirect_uris": [],
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://accounts.google.com/o/oauth2/token"
  }
}
샘플 요청
이 요청은 동영상을 업로드하고 제목, 설명, 키워드, 카테고리 등 동영상의 다양한 메타데이터 필드를 설정합니다. 명령줄 인수는 다음 섹션에 모두 자세하게 정의되어 있습니다.
python upload_video.py --file="/tmp/test_video_file.flv"
                       --title="Summer vacation in California"
                       --description="Had fun surfing in Santa Cruz"
                       --keywords="surfing,Santa Cruz"
                       --category="22"
                       --privacyStatus="private"
이 예에서 스크립트는 동영상에 다음 video [https://developers.google.com/youtube/v3/docs/videos?hl=ko] 리소스를 빌드하고 삽입합니다.
{
  "snippet": {
    "title": "Summer vacation in California",
    "description": "Had fun surfing in Santa Cruz",
    "tags": ["surfing", "Santa Cruz"],
    "categoryId": "22"
  },
  "status": {
    "privacyStatus": "private"
  }
}
스크립트 호출
아래 목록에서는 스크립트의 명령줄 인수를 정의합니다.
file: 이 인수는 업로드하는 동영상 파일의 위치를 식별합니다.
Example: --file="/home/path/to/file.mov"
title: 업로드하는 동영상의 제목입니다. 기본값은 Test title입니다.
Example: --title="Summer vacation in California"
description: 업로드할 동영상의 설명입니다. 기본값은 Test description입니다.
Example: --description="Had fun surfing in Santa Cruz"
category: 동영상과 연결된 YouTube 동영상 카테고리 [https://developers.google.com/youtube/v3/docs/videoCategories/list?hl=ko]의 카테고리 ID입니다. 기본값은 22이며, 이는 People & Blogs 카테고리를 나타냅니다.
Example: --category="22"
keywords: 동영상과 연결된 키워드를 쉼표로 구분한 목록입니다. 기본값은 빈 문자열입니다.
Example: --keywords="surfing"
privacyStatus: 동영상의 공개 범위 상태입니다. 기본 동작은 업로드된 동영상을 공개적으로 표시하는 것입니다 (public). 테스트 동영상을 업로드할 때는 --privacyStatus 인수 값을 지정하여 동영상을 비공개 또는 일부 공개로 설정하는 것이 좋습니다. 유효한 값은 public, private, unlisted입니다.
Example: --privacyStatus="private"
샘플 코드
upload_video.py 스크립트의 작동하는 전체 샘플은 다음과 같습니다.
#!/usr/bin/python

import httplib
import httplib2
import os
import random
import sys
import time

from apiclient.discovery import build
from apiclient.errors import HttpError
from apiclient.http import MediaFileUpload
from oauth2client.client import flow_from_clientsecrets
from oauth2client.file import Storage
from oauth2client.tools import argparser, run_flow


# Explicitly tell the underlying HTTP transport library not to retry, since
# we are handling retry logic ourselves.
httplib2.RETRIES = 1

# Maximum number of times to retry before giving up.
MAX_RETRIES = 10

# Always retry when these exceptions are raised.
RETRIABLE_EXCEPTIONS = (httplib2.HttpLib2Error, IOError, httplib.NotConnected,
  httplib.IncompleteRead, httplib.ImproperConnectionState,
  httplib.CannotSendRequest, httplib.CannotSendHeader,
  httplib.ResponseNotReady, httplib.BadStatusLine)

# Always retry when an apiclient.errors.HttpError with one of these status
# codes is raised.
RETRIABLE_STATUS_CODES = [500, 502, 503, 504]

# The CLIENT_SECRETS_FILE variable specifies the name of a file that contains
# the OAuth 2.0 information for this application, including its client_id and
# client_secret. You can acquire an OAuth 2.0 client ID and client secret from
# the Google API Console at
# https://console.cloud.google.com/.
# Please ensure that you have enabled the YouTube Data API for your project.
# For more information about using OAuth2 to access the YouTube Data API, see:
#   https://developers.google.com/youtube/v3/guides/authentication
# For more information about the client_secrets.json file format, see:
#   https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
CLIENT_SECRETS_FILE = "client_secrets.json"

# This OAuth 2.0 access scope allows an application to upload files to the
# authenticated user's YouTube channel, but doesn't allow other types of access.
YOUTUBE_UPLOAD_SCOPE = "https://www.googleapis.com/auth/youtube.upload"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

# This variable defines a message to display if the CLIENT_SECRETS_FILE is
# missing.
MISSING_CLIENT_SECRETS_MESSAGE = """
WARNING: Please configure OAuth 2.0

To make this sample run you will need to populate the client_secrets.json file
found at:

   %s

with information from the API Console
https://console.cloud.google.com/

For more information about the client_secrets.json file format, please visit:
https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
""" % os.path.abspath(os.path.join(os.path.dirname(__file__),
                                   CLIENT_SECRETS_FILE))

VALID_PRIVACY_STATUSES = ("public", "private", "unlisted")


def get_authenticated_service(args):
  flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE,
    scope=YOUTUBE_UPLOAD_SCOPE,
    message=MISSING_CLIENT_SECRETS_MESSAGE)

  storage = Storage("%s-oauth2.json" % sys.argv[0])
  credentials = storage.get()

  if credentials is None or credentials.invalid:
    credentials = run_flow(flow, storage, args)

  return build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION,
    http=credentials.authorize(httplib2.Http()))

def initialize_upload(youtube, options):
  tags = None
  if options.keywords:
    tags = options.keywords.split(",")

  body=dict(
    snippet=dict(
      title=options.title,
      description=options.description,
      tags=tags,
      categoryId=options.category
    ),
    status=dict(
      privacyStatus=options.privacyStatus
    )
  )

  # Call the API's videos.insert method to create and upload the video.
  insert_request = youtube.videos().insert(
    part=",".join(body.keys()),
    body=body,
    # The chunksize parameter specifies the size of each chunk of data, in
    # bytes, that will be uploaded at a time. Set a higher value for
    # reliable connections as fewer chunks lead to faster uploads. Set a lower
    # value for better recovery on less reliable connections.
    #
    # Setting "chunksize" equal to -1 in the code below means that the entire
    # file will be uploaded in a single HTTP request. (If the upload fails,
    # it will still be retried where it left off.) This is usually a best
    # practice, but if you're using Python older than 2.6 or if you're
    # running on App Engine, you should set the chunksize to something like
    # 1024 * 1024 (1 megabyte).
    media_body=MediaFileUpload(options.file, chunksize=-1, resumable=True)
  )

  resumable_upload(insert_request)

# This method implements an exponential backoff strategy to resume a
# failed upload.
def resumable_upload(insert_request):
  response = None
  error = None
  retry = 0
  while response is None:
    try:
      print "Uploading file..."
      status, response = insert_request.next_chunk()
      if response is not None:
        if 'id' in response:
          print "Video id '%s' was successfully uploaded." % response['id']
        else:
          exit("The upload failed with an unexpected response: %s" % response)
    except HttpError, e:
      if e.resp.status in RETRIABLE_STATUS_CODES:
        error = "A retriable HTTP error %d occurred:\n%s" % (e.resp.status,
                                                             e.content)
      else:
        raise
    except RETRIABLE_EXCEPTIONS, e:
      error = "A retriable error occurred: %s" % e

    if error is not None:
      print error
      retry += 1
      if retry > MAX_RETRIES:
        exit("No longer attempting to retry.")

      max_sleep = 2 ** retry
      sleep_seconds = random.random() * max_sleep
      print "Sleeping %f seconds and then retrying..." % sleep_seconds
      time.sleep(sleep_seconds)

if __name__ == '__main__':
  argparser.add_argument("--file", required=True, help="Video file to upload")
  argparser.add_argument("--title", help="Video title", default="Test Title")
  argparser.add_argument("--description", help="Video description",
    default="Test Description")
  argparser.add_argument("--category", default="22",
    help="Numeric video category. " +
      "See https://developers.google.com/youtube/v3/docs/videoCategories/list")
  argparser.add_argument("--keywords", help="Video keywords, comma separated",
    default="")
  argparser.add_argument("--privacyStatus", choices=VALID_PRIVACY_STATUSES,
    default=VALID_PRIVACY_STATUSES[0], help="Video privacy status.")
  args = argparser.parse_args()

  if not os.path.exists(args.file):
    exit("Please specify a valid file using the --file= parameter.")

  youtube = get_authenticated_service(args)
  try:
    initialize_upload(youtube, args)
  except HttpError, e:
    print "An HTTP error %d occurred:\n%s" % (e.resp.status, e.content)
추가 리소스
인증 [https://developers.google.com/youtube/v3/guides/authentication?hl=ko] 가이드에서 OAuth 2.0 구현에 관한 자세한 내용을 확인하세요.
참조 문서에서는 video [https://developers.google.com/youtube/v3/docs/videos?hl=ko] 리소스의 필드를 설명합니다.