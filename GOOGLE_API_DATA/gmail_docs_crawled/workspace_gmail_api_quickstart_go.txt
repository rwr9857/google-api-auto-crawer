Source URL: https://developers.google.com/workspace/gmail/api/quickstart/go

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
홈 [https://developers.google.com/?hl=ko]
Google Workspace [https://developers.google.com/workspace?hl=ko]
Gmail [https://developers.google.com/workspace/gmail?hl=ko]
가이드 [https://developers.google.com/workspace/gmail/api/guides?hl=ko]
의견 보내기
Go 빠른 시작
bookmark_border
이 페이지의 내용
목표
기본 요건
환경 설정
API 사용 설정
OAuth 동의 화면 구성
데스크톱 애플리케이션의 사용자 인증 정보 승인
작업공간 준비
샘플 설정
Gmail API에 요청을 보내는 Go 명령줄 애플리케이션을 만듭니다.
빠른 시작에서는 Google Workspace API를 호출하는 앱을 설정하고 실행하는 방법을 설명합니다. 이 빠른 시작에서는 테스트 환경에 적합한 간소화된 인증 방식을 사용합니다. 프로덕션 환경의 경우 앱에 적합한 액세스 사용자 인증 정보 선택 [https://developers.google.com/workspace/guides/create-credentials?hl=ko#choose_the_access_credential_that_is_right_for_you] 전에 인증 및 승인 [https://developers.google.com/workspace/guides/auth-overview?hl=ko]에 대해 알아보는 것이 좋습니다.
이 빠른 시작에서는 Google Workspace의 권장 API 클라이언트 라이브러리를 사용하여 인증 및 승인 흐름의 일부 세부정보를 처리합니다.
목표
환경을 설정합니다.
샘플을 설정합니다.
샘플을 실행합니다.
기본 요건
최신 버전의 Go [https://golang.org/]
최신 버전의 Git [https://git-scm.com/]
Google Cloud 프로젝트 [https://developers.google.com/workspace/guides/create-project?hl=ko].
Gmail이 사용 설정된 Google 계정
환경 설정
이 빠른 시작을 완료하려면 환경을 설정하세요.
API 사용 설정
Google API를 사용하려면 먼저 Google Cloud 프로젝트에서 사용 설정해야 합니다. 단일 Google Cloud 프로젝트에서 하나 이상의 API를 사용 설정할 수 있습니다.
Google Cloud 콘솔에서 Gmail API를 사용 설정합니다.
API 사용 설정 [https://console.cloud.google.com/flows/enableapi?apiid=gmail.googleapis.com&hl=ko]
OAuth 동의 화면 구성
새 Google Cloud 프로젝트를 사용하여 이 빠른 시작을 완료하는 경우 OAuth 동의 화면을 구성합니다. Cloud 프로젝트에서 이 단계를 이미 완료했다면 다음 섹션으로 건너뜁니다.
Google Cloud 콘솔에서 메뉴 menu > > 브랜딩으로 이동합니다.
브랜딩으로 이동 [https://console.cloud.google.com/auth/branding?hl=ko]
을 이미 구성한 경우 브랜딩 [https://console.cloud.google.com/auth/branding?hl=ko], 잠재고객 [https://console.cloud.google.com/auth/audience?hl=ko], 데이터 액세스 [https://console.cloud.google.com/auth/scopes?hl=ko]에서 다음 OAuth 동의 화면 설정을 구성할 수 있습니다. 아직 구성되지 않음이라는 메시지가 표시되면 시작하기를 클릭합니다.
앱 정보의 앱 이름에 앱 이름을 입력합니다.
사용자 지원 이메일에서 사용자가 동의에 대해 문의할 수 있는 지원 이메일 주소를 선택합니다.
다음을 클릭합니다.
시청자층에서 내부를 선택합니다.
다음을 클릭합니다.
연락처 정보에서 프로젝트 변경사항에 대한 알림을 받을 수 있는 이메일 주소를 입력합니다.
다음을 클릭합니다.
완료에서 Google API 서비스 사용자 데이터 정책 [https://developers.google.com/terms/api-services-user-data-policy?hl=ko]을 검토하고 동의하는 경우 Google API 서비스: 사용자 데이터 정책에 동의합니다를 선택합니다.
계속을 클릭합니다.
만들기를 클릭합니다.
지금은 범위를 추가하지 않아도 됩니다. 향후 Google Workspace 조직 외부에서 사용할 앱을 만들 때는 사용자 유형을 외부로 변경해야 합니다. 그런 다음 앱에 필요한 승인 범위를 추가합니다. 자세한 내용은 OAuth 동의 구성 [https://developers.google.com/workspace/guides/configure-oauth-consent?hl=ko] 가이드를 참고하세요.
데스크톱 애플리케이션의 사용자 인증 정보 승인
최종 사용자를 인증하고 앱에서 사용자 데이터에 액세스하려면 OAuth 2.0 클라이언트 ID를 하나 이상 만들어야 합니다. 클라이언트 ID는 Google OAuth 서버에서 단일 앱을 식별하는 데 사용됩니다. 앱이 여러 플랫폼에서 실행되는 경우 플랫폼별로 별도의 클라이언트 ID를 만들어야 합니다.
Google Cloud 콘솔에서 메뉴 menu > > 클라이언트로 이동합니다.
클라이언트로 이동 [https://console.cloud.google.com/auth/clients?hl=ko]
클라이언트 만들기를 클릭합니다.
애플리케이션 유형 > 데스크톱 앱을 클릭합니다.
이름 필드에 사용자 인증 정보의 이름을 입력합니다. 이 이름은 Google Cloud 콘솔에만 표시됩니다.
만들기를 클릭합니다.
새로 만든 사용자 인증 정보가 'OAuth 2.0 클라이언트 ID' 아래에 표시됩니다.
다운로드한 JSON 파일을 credentials.json로 저장하고 파일을 작업 디렉터리로 이동합니다.
작업공간 준비
작업 디렉터리를 만듭니다.
mkdir quickstart
작업 디렉터리로 변경합니다.
cd quickstart
새 모듈을 초기화합니다.
go mod init quickstart
Gmail API Go 클라이언트 라이브러리 및 OAuth2.0 패키지를 가져옵니다.
go get google.golang.org/api/gmail/v1
go get golang.org/x/oauth2/google
샘플 설정
작업 디렉터리에 quickstart.go이라는 파일을 만듭니다.
파일에 다음 코드를 붙여넣습니다.
gmail/quickstart/quickstart.go
GitHub에서 보기 [https://github.com/googleworkspace/go-samples/blob/main/gmail/quickstart/quickstart.go]
package main

import (
 "context"
 "encoding/json"
 "fmt"
 "log"
 "net/http"
 "os"

 "golang.org/x/oauth2"
 "golang.org/x/oauth2/google"
 "google.golang.org/api/gmail/v1"
 "google.golang.org/api/option"
)

// Retrieve a token, saves the token, then returns the generated client.
func getClient(config *oauth2.Config) *http.Client {
 // The file token.json stores the user's access and refresh tokens, and is
 // created automatically when the authorization flow completes for the first
 // time.
 tokFile := "token.json"
 tok, err := tokenFromFile(tokFile)
 if err != nil {
  tok = getTokenFromWeb(config)
  saveToken(tokFile, tok)
 }
 return config.Client(context.Background(), tok)
}

// Request a token from the web, then returns the retrieved token.
func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
 authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
 fmt.Printf("Go to the following link in your browser then type the "+
  "authorization code: \n%v\n", authURL)

 var authCode string
 if _, err := fmt.Scan(&authCode); err != nil {
  log.Fatalf("Unable to read authorization code: %v", err)
 }

 tok, err := config.Exchange(context.TODO(), authCode)
 if err != nil {
  log.Fatalf("Unable to retrieve token from web: %v", err)
 }
 return tok
}

// Retrieves a token from a local file.
func tokenFromFile(file string) (*oauth2.Token, error) {
 f, err := os.Open(file)
 if err != nil {
  return nil, err
 }
 defer f.Close()
 tok := &oauth2.Token{}
 err = json.NewDecoder(f).Decode(tok)
 return tok, err
}

// Saves a token to a file path.
func saveToken(path string, token *oauth2.Token) {
 fmt.Printf("Saving credential file to: %s\n", path)
 f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
 if err != nil {
  log.Fatalf("Unable to cache oauth token: %v", err)
 }
 defer f.Close()
 json.NewEncoder(f).Encode(token)
}

func main() {
 ctx := context.Background()
 b, err := os.ReadFile("credentials.json")
 if err != nil {
  log.Fatalf("Unable to read client secret file: %v", err)
 }

 // If modifying these scopes, delete your previously saved token.json.
 config, err := google.ConfigFromJSON(b, gmail.GmailReadonlyScope)
 if err != nil {
  log.Fatalf("Unable to parse client secret file to config: %v", err)
 }
 client := getClient(config)

 srv, err := gmail.NewService(ctx, option.WithHTTPClient(client))
 if err != nil {
  log.Fatalf("Unable to retrieve Gmail client: %v", err)
 }

 user := "me"
 r, err := srv.Users.Labels.List(user).Do()
 if err != nil {
  log.Fatalf("Unable to retrieve labels: %v", err)
 }
 if len(r.Labels) == 0 {
  fmt.Println("No labels found.")
  return
 }
 fmt.Println("Labels:")
 for _, l := range r.Labels {
  fmt.Printf("- %s\n", l.Name)
 }
}
샘플 실행
작업 디렉터리에서 샘플을 빌드하고 실행합니다.
go run quickstart.go
샘플을 처음 실행하면 액세스 권한을 승인하라는 메시지가 표시됩니다.
아직 Google 계정에 로그인하지 않았다면 메시지가 표시될 때 로그인합니다. 여러 계정에 로그인되어 있는 경우 승인에 사용할 계정을 하나 선택합니다.
수락을 클릭합니다.
Go 애플리케이션이 실행되고 Gmail API를 호출합니다.
승인 정보는 파일 시스템에 저장되므로 다음에 샘플 코드를 실행할 때는 승인 메시지가 표시되지 않습니다.
다음 단계
인증 및 승인 문제 해결 [https://developers.google.com/workspace/gmail/api/troubleshoot-authentication-authorization?hl=ko]
Gmail API 참조 문서 [https://developers.google.com/workspace/gmail/api/reference/rest?hl=ko]
GitHub의 google-api-go-client 섹션 [https://github.com/google/google-api-go-client]
의견 보내기