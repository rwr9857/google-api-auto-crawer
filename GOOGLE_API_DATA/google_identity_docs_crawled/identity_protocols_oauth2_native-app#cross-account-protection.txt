[2025-08-31] Source URL: https://developers.google.com/identity/protocols/oauth2/native-app#cross-account-protection

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
승인 [https://developers.google.com/identity/protocols/oauth2?hl=ko]
모바일 및 데스크톱 앱용 OAuth 2.0
bookmark_border
이 페이지의 내용
라이브러리 및 샘플 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#libraries]
기본 요건 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#prerequisites]
프로젝트에 API 사용 설정 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#enable-apis]
승인 사용자 인증 정보 만들기 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#creatingcred]
액세스 범위 식별 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#identify-access-scopes]
[https://developers.google.com/identity/protocols/oauth2?hl=ko]
<0x0 [https://developers.google.com/identity/protocols/oauth2?hl=ko] 개요에서는 Google에서 지원하는 OAuth 2.0 흐름을 요약하여 애플리케이션에 적합한 흐름을 선택했는지 확인할 수 있습니다.
이 문서에서는 휴대전화, 태블릿, 컴퓨터와 같은 기기에 설치된 애플리케이션이 Google의 OAuth 2.0 엔드포인트를 사용하여 Google API에 대한 액세스를 승인하는 방법을 설명합니다.
OAuth 2.0을 사용하면 사용자가 사용자 이름, 비밀번호, 기타 정보를 비공개로 유지하면서 특정 데이터를 애플리케이션과 공유할 수 있습니다. 예를 들어 애플리케이션은 OAuth 2.0을 사용하여 사용자의 Google Drive에 파일을 저장할 권한을 얻을 수 있습니다.
설치된 앱은 개별 기기에 배포되며 이러한 앱은 비밀을 유지할 수 없는 것으로 가정합니다. 사용자가 앱에 있거나 앱이 백그라운드에서 실행되는 동안 Google API에 액세스할 수 있습니다.
이 승인 흐름은 웹 서버 애플리케이션 [https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko]에 사용되는 흐름과 유사합니다. 주요 차이점은 설치된 앱이 시스템 브라우저를 열고 Google 승인 서버의 응답을 처리하기 위해 로컬 리디렉션 URI를 제공해야 한다는 것입니다.
라이브러리 및 샘플
모바일 앱의 경우 최신 버전의 Google Identity Services 네이티브 라이브러리(Android [https://developer.android.com/identity/authorization?hl=ko]) 및 Google 로그인 네이티브 라이브러리(iOS [https://developers.google.com/identity/sign-in/ios/api-access?hl=ko])를 사용하는 것이 좋습니다. 이러한 라이브러리는 사용자 승인을 처리하며 여기에 설명된 하위 수준 프로토콜보다 구현이 간단합니다.
시스템 브라우저를 지원하지 않거나 입력 기능이 제한된 기기(예: TV, 게임 콘솔, 카메라, 프린터)에서 실행되는 앱의 경우 TV 및 기기용 OAuth 2.0 [https://developers.google.com/identity/protocols/oauth2/limited-input-device?hl=ko] 또는 TV 및 제한된 입력 기기에서의 로그인 [https://developers.google.com/identity/gsi/web/guides/devices?hl=ko]을 참고하세요.
기본 요건
프로젝트에 API 사용 설정
Google API를 호출하는 애플리케이션은 API Console에서 해당 API를 사용 설정해야 합니다.
프로젝트에서 API를 사용 설정하려면 다음 단계를 따르세요.
Google API Console에서Open the API Library [https://console.developers.google.com/apis/library?hl=ko] 를 사용합니다.
If prompted, select a project, or create a new one.
API Library 에는 사용 가능한 모든 API가 제품군과 인기도를 기준으로 분류되어 있습니다. 사용 설정하려는 API가 목록에 없는 경우 검색을 사용하여 찾거나 속한 제품군에서 모두 보기를 클릭합니다.
사용 설정하려는 API를 선택한 다음 사용 설정 버튼을 클릭합니다.
If prompted, enable billing.
If prompted, read and accept the API's Terms of Service.
승인 사용자 인증 정보 만들기
OAuth 2.0을 사용하여 Google API에 액세스하는 애플리케이션에는 Google의 OAuth 2.0 서버에 애플리케이션을 식별하는 승인 사용자 인증 정보가 있어야 합니다. 다음 단계에서는 프로젝트의 사용자 인증 정보를 만드는 방법을 설명합니다. 그러면 애플리케이션에서 사용자 인증 정보를 사용하여 해당 프로젝트에 사용 설정된 API에 액세스할 수 있습니다.
Go to the Clients page [https://console.developers.google.com/auth/clients?hl=ko].
클라이언트 만들기를 클릭합니다.
다음 섹션에서는 Google의 승인 서버에서 지원하는 클라이언트 유형을 설명합니다. 애플리케이션에 권장되는 클라이언트 유형을 선택하고, OAuth 클라이언트 이름을 지정하고, 양식의 다른 필드를 적절하게 설정합니다.
--- 탭: Android [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#android] ---
Android 애플리케이션 유형을 선택합니다.
      OAuth 클라이언트의 이름을 입력합니다. 이 이름은 클라이언트를 식별하기 위해 프로젝트의 Clients page [https://console.developers.google.com/auth/clients?hl=ko] 에 표시됩니다.
      Android 앱의 패키지 이름을 입력합니다. 이 값은 앱 매니페스트 파일의 <manifest> 요소의 package 속성 [https://developer.android.com/guide/topics/manifest/manifest-element?hl=ko#package]에 정의되어 있습니다.
      
      앱 배포의 SHA-1 서명 인증서 지문을 입력합니다.
        
          앱에서 Google Play 앱 서명 [https://support.google.com/googleplay/android-developer/answer/7384423?hl=ko]을 사용하는 경우 Play Console의 앱 서명 페이지에서 SHA-1 디지털 지문을 복사합니다.
          자체 키 저장소와 서명 키를 관리하는 경우 Java에 포함된 keytool 유틸리티를 사용하여 인증서 정보를 사람이 읽을 수 있는 형식으로 출력합니다. keytool 출력의 Certificate fingerprints 섹션에 있는 SHA1 값을 복사합니다. 자세한 내용은 Android용 Google API 문서의 클라이언트 인증 [https://developers.google.com/android/guides/client-auth?hl=ko]을 참고하세요.
        
      
      (선택사항) Android 애플리케이션의 소유권을 확인 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#verify-app-ownership]합니다.
      만들기를 클릭합니다.

--- 탭: iOS [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#ios] ---
iOS 애플리케이션 유형을 선택합니다.
      OAuth 클라이언트의 이름을 입력합니다. 이 이름은 클라이언트를 식별하기 위해 프로젝트의 Clients page [https://console.developers.google.com/auth/clients?hl=ko] 에 표시됩니다.
      앱의 번들 식별자를 입력합니다. 번들 ID는 앱의 정보 속성 목록 리소스 파일 (info.plist)에 있는 CFBundleIdentifier [https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier] 키의 값입니다. 이 값은 Xcode 프로젝트 편집기의 일반 창 또는 서명 및 기능 창에 가장 일반적으로 표시됩니다. 번들 ID는 Apple의 App Store Connect 사이트 [https://appstoreconnect.apple.com/]에 있는 앱의 앱 정보 페이지의 일반 정보 섹션에도 표시됩니다.
        앱 체크 기능을 사용하는 경우 번들 ID를 변경할 수 없으므로 앱에 올바른 번들 ID를 사용하고 있는지 확인하세요.
        

      (선택사항)
        앱이 Apple App Store에 게시된 경우 앱의 App Store ID를 입력합니다. 스토어 ID는 모든 Apple App Store URL에 포함된 숫자 문자열입니다.
        
          iOS 또는 iPadOS 기기에서 Apple App Store 앱 [https://www.apple.com/ios/app-store/]을 엽니다.
          앱을 검색합니다.
          공유 버튼 (사각형 및 위쪽 화살표 기호)을 선택합니다.
          링크 복사를 선택합니다.
          텍스트 편집기에 링크를 붙여넣습니다. App Store ID는 URL의 마지막 부분입니다.
            예: https://apps.apple.com/app/google/id284815942
          
        
      (선택사항)
        팀 ID를 입력합니다. 자세한 내용은 Apple 개발자 계정 문서의 팀 ID 찾기 [https://help.apple.com/developer-account/#/dev55c3c710c]를 참고하세요.
        참고: 클라이언트에 앱 체크를 사용 설정하는 경우 팀 ID 필드가 필요합니다.
      
      (선택사항)
        iOS 앱에 앱 체크를 사용 설정합니다. 앱 체크를 사용 설정하면 Apple의 App Attest 서비스 [https://developer.apple.com/documentation/devicecheck/establishing_your_app_s_integrity]를 사용하여 OAuth 클라이언트에서 시작된 OAuth 2.0 요청이 정품이고 앱에서 전송되었는지 확인합니다. 이렇게 하면 앱 사칭 위험을 줄일 수 있습니다.
            iOS 앱에서 앱 체크를 사용 설정하는 방법 자세히 알아보기 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#enable-app-check-for-your-ios-client]
        
      
      만들기를 클릭합니다.

--- 탭: UWP [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#uwp] ---
범용 Windows 플랫폼 애플리케이션 유형을 선택합니다.
      OAuth 클라이언트의 이름을 입력합니다. 이 이름은 클라이언트를 식별하기 위해 프로젝트의 Clients page [https://console.developers.google.com/auth/clients?hl=ko] 에 표시됩니다.
      앱의 12자리 Microsoft Store ID를 입력합니다. 이 값은 Microsoft 파트너 센터 [https://partner.microsoft.com/dashboard]의 앱 관리 섹션에 있는 앱 ID [https://docs.microsoft.com/windows/uwp/publish/view-app-identity-details] 페이지에서 확인할 수 있습니다.
      만들기를 클릭합니다.
    
    
      UWP 앱의 경우 리디렉션 URI는 애플리케이션의 고유 패키지 보안 식별자 (SID)를 사용하여 형성됩니다. 앱의 Package SID은 Visual Studio 프로젝트 내의 Package.appxmanifest 파일에서 찾을 수 있습니다.
    
    
      Google Cloud 콘솔에서 클라이언트 ID를 만들 때 패키지 SID의 소문자 값을 사용하여 다음 형식으로 리디렉션 URI를 지정해야 합니다.
    
    ms-app://YOUR_APP_PACKAGE_SID
    
      
      참고: OAuth 2.0이 올바르게 함수로 리디렉션되려면 ms-app:// 스키마가 필요합니다. 이 스킴은 프로토콜 활성화에 사용되며, 이를 통해 운영체제는 사용자가 브라우저에서 인증한 후 애플리케이션을 실행하고 Google에서 승인 응답을 전달할 수 있습니다.
      
    
    
      UWP 앱의 경우 Microsoft 문서 [https://learn.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap-protocol]에 명시된 대로 맞춤 URI 스킴은 39자를 초과할 수 없습니다.
액세스 범위 식별
범위를 사용 설정하면 애플리케이션은 필요한 리소스에 대한 액세스만 요청하고 사용자는 애플리케이션에 부여하는 액세스 양을 제어할 수 있습니다. 따라서 요청된 범위 수와 사용자 동의를 얻을 가능성 간에 역관계가 있을 수 있습니다.
OAuth 2.0 승인을 구현하기 전에 앱에서 액세스 권한이 필요한 범위를 지정하는 것이 좋습니다.
참고: 설치된 앱이나 기기에는 증분 승인이 지원되지 않습니다.
OAuth 2.0 API 범위 [https://developers.google.com/identity/protocols/oauth2/scopes?hl=ko] 문서에는 Google API에 액세스하는 데 사용할 수 있는 전체 범위 목록이 포함되어 있습니다.
공개 애플리케이션에서 특정 사용자 데이터에 대한 액세스를 허용하는 범위를 사용하는 경우 인증 절차를 완료해야 합니다. 애플리케이션을 테스트할 때 화면에 확인되지 않은 앱이 표시되면 확인 요청을 제출하여 이를 삭제해야 합니다. 고객센터에서 인증되지 않은 앱 [https://support.google.com/cloud/answer/7454865?hl=ko]에 대해 자세히 알아보고 앱 인증에 관한 자주 묻는 질문(FAQ) [https://support.google.com/cloud/answer/9110914?hl=ko]에 대한 답변을 확인하세요.
OAuth 2.0 액세스 토큰 가져오기
다음 단계에서는 애플리케이션이 Google의 OAuth 2.0 서버와 상호작용하여 사용자를 대신하여 API 요청을 실행하기 위한 사용자의 동의를 얻는 방법을 보여줍니다. 사용자 승인이 필요한 Google API 요청을 실행하려면 애플리케이션에 해당 동의가 있어야 합니다.
1단계: 코드 검증 도구 및 챌린지 생성
Google은 설치된 앱 흐름을 더 안전하게 만들기 위해 코드 교환용 증명 키 [https://tools.ietf.org/html/rfc7636](PKCE) 프로토콜을 지원합니다. 각 승인 요청에 대해 고유한 코드 인증자가 생성되며, 'code_challenge'라는 변환된 값이 승인 코드를 얻기 위해 승인 서버로 전송됩니다.
코드 인증자 만들기
code_verifier는 예약되지 않은 문자 [A-Z] / [a-z] / [0-9] / '-' / '.' / '_' / '~'를 사용하는 엔트로피가 높은 암호화 무작위 문자열로, 최소 길이는 43자, 최대 길이는 128자입니다.
코드 확인자에는 값을 추측하는 것이 비실용적일 정도로 충분한 엔트로피가 있어야 합니다.
코드 챌린지 만들기
코드 챌린지를 만드는 두 가지 방법이 지원됩니다.
코드 챌린지 생성 방법
S256 (권장) 코드 챌린지는 코드 인증자의 Base64URL (패딩 없음)로 인코딩된 SHA256 해시입니다.
code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
plain 코드 챌린지는 위에서 생성된 코드 인증자와 동일한 값입니다.
code_challenge = code_verifier
2단계: Google의 OAuth 2.0 서버에 요청 전송
사용자 승인을 받으려면 https://accounts.google.com/o/oauth2/v2/auth에서 Google 승인 서버에 요청을 전송하세요. 이 엔드포인트는 활성 세션 조회를 처리하고, 사용자를 인증하고, 사용자 동의를 획득합니다. 엔드포인트는 SSL을 통해서만 액세스할 수 있으며 HTTP (비 SSL) 연결은 거부합니다.
승인 서버는 설치된 애플리케이션에 대해 다음 쿼리 문자열 매개변수를 지원합니다.
매개변수
client_id 필수
애플리케이션의 클라이언트 ID입니다. 이 값은 Cloud Console Clients page [https://console.developers.google.com/auth/clients?hl=ko]에서 확인할 수 있습니다.
redirect_uri 필수
Google의 승인 서버가 앱에 응답을 전송하는 방법을 결정합니다. 설치된 앱에 사용할 수 있는 리디렉션 옵션이 여러 개 있으며, 특정 리디렉션 방법을 염두에 두고 승인 사용자 인증 정보 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#creatingcred]를 설정했을 것입니다.
이 값은 클라이언트의 Cloud Console Clients page [https://console.developers.google.com/auth/clients?hl=ko]에 구성한 OAuth 2.0 클라이언트의 승인된 리디렉션 URI 중 하나와 정확히 일치해야 합니다. 이 값이 승인된 URI와 일치하지 않으면 redirect_uri_mismatch 오류가 발생합니다.
아래 표에는 각 메서드에 적합한 redirect_uri 매개변수 값이 나와 있습니다.
redirect_uri 값
맞춤 URI 스킴 com.example.app:redirect_uri_path
또는
com.googleusercontent.apps.123:redirect_uri_path
com.example.app은 내가 관리하는 도메인의 역방향 DNS 표기법입니다. 맞춤 스키마가 유효하려면 마침표가 포함되어야 합니다.
com.googleusercontent.apps.123은 클라이언트 ID의 역방향 DNS 표기법입니다.
redirect_uri_path는 /oauth2redirect과 같은 선택적 경로 구성요소입니다. 경로는 일반 HTTP URL과 달리 단일 슬래시로 시작해야 합니다.
참고 : 맞춤 URI 스킴은 더 이상 Chrome 앱에서 지원되지 않으며 Android에서 기본적으로 사용 중지됩니다. Android 및 Chrome 앱의 맞춤 스키마 대안에 대해 자세히 알아보기 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#redirect-uri_custom-scheme]
루프백 IP 주소 http://127.0.0.1:port 또는 http://[::1]:port
플랫폼에 관련 루프백 IP 주소를 쿼리하고 사용 가능한 임의 포트에서 HTTP 리스너를 시작합니다. port를 앱이 수신 대기하는 실제 포트 번호로 바꿉니다.
모바일 앱의 루프백 IP 주소 리디렉션 옵션 지원은 지원 중단 [https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html#disallowed-loopback]됩니다.
response_type 필수
Google OAuth 2.0 엔드포인트가 승인 코드를 반환하는지 여부를 결정합니다.
설치된 애플리케이션의 매개변수 값을 code로 설정합니다.
scope 필수
애플리케이션이 사용자를 대신하여 액세스할 수 있는 리소스를 식별하는 공백으로 구분된 범위 목록입니다. 이러한 값은 Google이 사용자에게 표시하는 동의 화면에 정보를 제공합니다.
범위를 사용 설정하면 애플리케이션은 필요한 리소스에 대한 액세스만 요청하고 사용자는 애플리케이션에 부여하는 액세스 양을 제어할 수 있습니다. 따라서 요청된 범위의 수와 사용자 동의를 얻을 가능성 사이에는 역관계가 있습니다.
code_challenge 권장
승인 코드 교환 중에 서버 측 챌린지로 사용될 인코딩된 code_verifier를 지정합니다. 자세한 내용은 위의 코드 챌린지 만들기 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#create-code-challenge] 섹션을 참고하세요.
code_challenge_method 권장
승인 코드 교환 중에 사용될 code_verifier를 인코딩하는 데 사용된 방법을 지정합니다. 이 매개변수는 위에서 설명한 code_challenge 매개변수와 함께 사용해야 합니다. code_challenge를 포함하는 요청에 code_challenge_method가 없는 경우 기본값은 plain입니다. 이 매개변수에 지원되는 값은 S256 또는 plain뿐입니다.
state 권장
애플리케이션이 승인 요청과 승인 서버의 응답 간에 상태를 유지하는 데 사용하는 문자열 값을 지정합니다. 사용자가 애플리케이션의 액세스 요청에 동의하거나 거부하면 서버는 redirect_uri의 URL 프래그먼트 식별자 (#)에서 name=value 쌍으로 전송한 정확한 값을 반환합니다.
이 매개변수는 사용자를 애플리케이션의 올바른 리소스로 안내하고, nonce를 전송하고, 크로스 사이트 요청 위조를 완화하는 등 여러 용도로 사용할 수 있습니다. redirect_uri는 추측할 수 있으므로 state 값을 사용하면 수신 연결이 인증 요청의 결과임을 더 확실하게 알 수 있습니다. 무작위 문자열을 생성하거나 쿠키 또는 클라이언트의 상태를 캡처하는 다른 값의 해시를 인코딩하는 경우 응답을 검증하여 요청과 응답이 동일한 브라우저에서 시작되었는지 추가로 확인할 수 있으므로 크로스 사이트 요청 위조 [https://datatracker.ietf.org/doc/html/rfc6749#section-10.12]와 같은 공격으로부터 보호할 수 있습니다. state 토큰을 만들고 확인하는 방법의 예는 OpenID Connect [https://developers.google.com/identity/protocols/oauth2/openid-connect?hl=ko#createxsrftoken] 문서를 참고하세요.
중요: OAuth 클라이언트는 OAuth2 사양 [https://datatracker.ietf.org/doc/html/rfc6749#section-10.12]에 명시된 대로 CSRF를 방지해야 합니다. 이를 달성하는 한 가지 방법은 state 매개변수를 사용하여 승인 요청과 승인 서버의 응답 간에 상태를 유지하는 것입니다.
login_hint 선택사항
애플리케이션이 인증을 시도하는 사용자를 알고 있는 경우 이 매개변수를 사용하여 Google 인증 서버에 힌트를 제공할 수 있습니다. 서버는 힌트를 사용하여 로그인 양식의 이메일 필드를 미리 입력하거나 적절한 다중 로그인 세션을 선택하여 로그인 흐름을 간소화합니다.
매개변수 값을 이메일 주소 또는 sub 식별자로 설정합니다. 이는 사용자의 Google ID와 동일합니다.
참고: 클라이언트가 client_secret를 기밀로 유지할 수 없기 때문에 설치된 앱을 사용한 점진적 승인은 지원되지 않습니다.
샘플 승인 URL
아래 탭에는 다양한 리디렉션 URI 옵션의 샘플 승인 URL이 표시되어 있습니다.
redirect_uri 매개변수의 값을 제외하고 URL이 동일합니다. URL에는 필수 response_type 및 client_id 매개변수와 선택적 state 매개변수도 포함됩니다. 각 URL에는 가독성을 위해 줄바꿈과 공백이 포함되어 있습니다.
--- 탭: 커스텀 URI 스킴 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#%EC%BB%A4%EC%8A%A4%ED%85%80-uri-%EC%8A%A4%ED%82%B4] ---
https://accounts.google.com/o/oauth2/v2/auth?
 scope=email%20profile&
 response_type=code&
 state=security_token%3D138r5719ru3e1%26url%3Dhttps%3A%2F%2Foauth2.example.com%2Ftoken&
 redirect_uri=com.example.app%3A/oauth2redirect&
 client_id=client_id

--- 탭: 루프백 IP 주소 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#%EB%A3%A8%ED%94%84%EB%B0%B1-ip-%EC%A3%BC%EC%86%8C] ---
https://accounts.google.com/o/oauth2/v2/auth?
 scope=email%20profile&
 response_type=code&
 state=security_token%3D138r5719ru3e1%26url%3Dhttps%3A%2F%2Foauth2.example.com%2Ftoken&
 redirect_uri=http%3A//127.0.0.1%3A9004&
 client_id=client_id
3단계: Google에서 사용자에게 동의를 요청함
이 단계에서 사용자는 애플리케이션에 요청된 액세스 권한을 부여할지 결정합니다. 이 단계에서 Google은 애플리케이션의 이름과 사용자의 승인 사용자 인증 정보에 대한 액세스 권한을 요청하는 Google API 서비스, 부여될 액세스 범위의 요약을 표시하는 동의 창을 표시합니다. 그러면 사용자는 애플리케이션에서 요청한 하나 이상의 범위에 대한 액세스 권한을 부여하는 데 동의하거나 요청을 거부할 수 있습니다.
이 단계에서는 액세스 권한이 부여되었는지 여부를 나타내는 Google의 OAuth 2.0 서버의 응답을 기다리므로 애플리케이션에서 아무것도 하지 않아도 됩니다. 이 응답은 다음 단계에서 설명합니다.
오류
Google의 OAuth 2.0 승인 엔드포인트에 대한 요청에 예상되는 인증 및 승인 흐름 대신 사용자 대상 오류 메시지가 표시될 수 있습니다. 일반적인 오류 코드와 권장되는 해결 방법은 아래에 나열되어 있습니다.
admin_policy_enforced
Google Workspace 관리자의 정책으로 인해 Google 계정에서 요청된 하나 이상의 범위를 승인할 수 없습니다. 관리자가 OAuth 클라이언트 ID에 대한 액세스 권한이 명시적으로 부여될 때까지 모든 범위 또는 민감하고 제한된 범위에 대한 액세스를 제한하는 방법에 대한 자세한 내용은 Google Workspace 관리자 도움말 Google Workspace 데이터에 액세스할 수 있는 서드 파티 및 내부 앱 제어하기 [https://support.google.com/a/answer/7281227?hl=ko]를 참고하세요.
disallowed_useragent
승인 엔드포인트가 Google의 OAuth 2.0 정책 [https://developers.google.com/identity/protocols/oauth2/policies?hl=ko#browsers]에 의해 허용되지 않는 삽입된 사용자 에이전트 내에 표시됩니다.
--- 탭: Android [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#android] ---
Android 개발자는 android.webkit.WebView [https://developer.android.com/reference/android/webkit/WebView?hl=ko]에서 승인 요청을 열 때 이 오류 메시지가 표시될 수 있습니다.
      개발자는 대신 Google Sign-In for Android [https://developers.google.com/identity/sign-in/android?hl=ko] 또는 OpenID Foundation의 AppAuth for Android [https://openid.github.io/AppAuth-Android/]와 같은 Android 라이브러리를 사용해야 합니다.
    Android 앱이 삽입된 사용자 에이전트에서 일반 웹 링크를 열고 사용자가 사이트에서 Google의 OAuth 2.0 승인 엔드포인트로 이동하면 웹 개발자에게 이 오류가 발생할 수 있습니다. 개발자는 일반 링크가 운영체제의 기본 링크 핸들러에서 열리도록 허용해야 합니다. 여기에는 Android 앱 링크 [https://developer.android.com/training/app-links?hl=ko] 핸들러와 기본 브라우저 앱이 모두 포함됩니다. Android 맞춤 탭 [https://developer.chrome.com/docs/android/custom-tabs/overview/?hl=ko] 라이브러리도 지원되는 옵션입니다.

--- 탭: iOS [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#ios] ---
iOS 및 macOS 개발자는 WKWebView [https://developer.apple.com/documentation/webkit/wkwebview]에서 승인 요청을 열 때 이 오류가 발생할 수 있습니다.
      대신 개발자는 Google Sign-In for iOS [https://developers.google.com/identity/sign-in/ios?hl=ko] 또는 OpenID Foundation의 AppAuth for iOS [https://openid.github.io/AppAuth-iOS/]와 같은 iOS 라이브러리를 사용해야 합니다.
    iOS 또는 macOS 앱이 삽입된 사용자 에이전트에서 일반 웹 링크를 열고 사용자가 사이트에서 Google의 OAuth 2.0 승인 엔드포인트로 이동하면 웹 개발자에게 이 오류가 발생할 수 있습니다. 개발자는 일반 링크가 운영체제의 기본 링크 핸들러에서 열리도록 허용해야 합니다. 여기에는 범용 링크 [https://developer.apple.com/ios/universal-links/] 핸들러와 기본 브라우저 앱이 모두 포함됩니다. SFSafariViewController [https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller] 라이브러리도 지원되는 옵션입니다.
org_internal
요청의 OAuth 클라이언트 ID는 특정 Google Cloud 조직 [https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy?hl=ko#organizations]의 Google 계정에 대한 액세스를 제한하는 프로젝트에 속합니다. 이 구성 옵션에 대한 자세한 내용은 OAuth 동의 화면 설정 도움말의 사용자 유형 [https://support.google.com/cloud/answer/10311615?hl=ko#user-type] 섹션을 참고하세요.
deleted_client
요청을 만드는 데 사용된 OAuth 클라이언트가 삭제되었습니다. 삭제는 수동으로 이루어질 수도 있고 사용하지 않는 클라이언트 [https://support.google.com/cloud/answer/15549257?hl=ko#unused-client-deletion]의 경우 자동으로 이루어질 수도 있습니다. 삭제된 클라이언트는 삭제 후 30일 이내에 복원할 수 있습니다. 자세히 알아보기 [https://support.google.com/cloud/answer/15549257?hl=ko#delete-oauth-clients]
invalid_grant
코드 검증 도구 및 챌린지 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#step1-code-verifier]를 사용하는 경우 code_callenge 매개변수가 잘못되었거나 누락되었습니다. code_challenge 매개변수가 올바르게 설정되어 있는지 확인합니다.
액세스 토큰을 갱신할 때 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#offline] 토큰이 만료되었거나 무효화되었을 수 있습니다. 사용자를 다시 인증하고 사용자 동의를 요청하여 새 토큰을 획득합니다. 이 오류가 계속 표시되면 애플리케이션이 올바르게 구성되었는지, 요청에 올바른 토큰과 매개변수를 사용하고 있는지 확인하세요. 그렇지 않으면 사용자 계정이 삭제되었거나 사용 중지되었을 수 있습니다.
redirect_uri_mismatch
승인 요청에 전달된 redirect_uri이 OAuth 클라이언트 ID의 승인된 리디렉션 URI와 일치하지 않습니다. Google Cloud Console Clients page [https://console.developers.google.com/auth/clients?hl=ko]에서 승인된 리디렉션 URI를 검토합니다.
전달된 redirect_uri이 클라이언트 유형에 유효하지 않을 수 있습니다.
redirect_uri 매개변수는 지원 중단되어 더 이상 지원되지 않는 OAuth 대역 외 (OOB) 흐름을 참조할 수 있습니다. 이전 가이드 [https://developers.google.com/identity/protocols/oauth2/resources/oob-migration?hl=ko]를 참고하여 통합을 업데이트하세요.
invalid_request
요청에 문제가 있습니다. 이 문제는 다음과 같은 여러 이유로 발생할 수 있습니다.
요청의 형식이 올바르지 않습니다.
요청에 필수 매개변수가 누락되었습니다.
요청에서 Google이 지원하지 않는 승인 방법을 사용합니다. OAuth 통합이 권장 통합 방법을 사용하는지 확인
리디렉션 URI에 맞춤 스킴이 사용됨 : Chrome 앱에서 맞춤 URI 스킴이 지원되지 않음 또는 Android 클라이언트에서 맞춤 URI 스킴이 사용 설정되지 않음이라는 오류 메시지가 표시되면 Chrome 앱에서 지원되지 않고 Android에서 기본적으로 사용 중지된 맞춤 URI 스킴을 사용하고 있는 것입니다. 맞춤 URI 스킴 대안에 대해 자세히 알아보기 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#redirect-uri_custom-scheme]
4단계: OAuth 2.0 서버 응답 처리
애플리케이션이 승인 응답을 수신하는 방식은 사용하는 리디렉션 URI 스키마 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#creatingcred]에 따라 다릅니다. 스키마와 관계없이 응답에는 승인 코드 (code) 또는 오류(error)가 포함됩니다. 예를 들어 error=access_denied는 사용자가 요청을 거부했음을 나타냅니다.
사용자가 애플리케이션에 대한 액세스 권한을 부여하면 다음 단계에 설명된 대로 승인 코드를 액세스 토큰 및 갱신 토큰으로 교환할 수 있습니다.
5단계: 갱신 및 액세스 토큰의 승인 코드 교환
승인 코드를 액세스 토큰으로 교환하려면 https://oauth2.googleapis.com/token 엔드포인트를 호출하고 다음 매개변수를 설정합니다.
필드
client_id Cloud Console Clients page [https://console.developers.google.com/auth/clients?hl=ko]에서 가져온 클라이언트 ID입니다.
client_secret Cloud Console Clients page [https://console.developers.google.com/auth/clients?hl=ko]에서 가져온 클라이언트 보안 비밀번호입니다.
code 초기 요청에서 반환된 승인 코드입니다.
code_verifier 1단계 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#step1-code-verifier]에서 만든 코드 검증기
grant_type OAuth 2.0 사양에 정의된 대로 [https://tools.ietf.org/html/rfc6749#section-4.1.3] 이 필드의 값은 authorization_code로 설정해야 합니다.
redirect_uri 지정된 client_id의 Cloud Console Clients page [https://console.developers.google.com/auth/clients?hl=ko] 에 프로젝트에 대해 나열된 리디렉션 URI 중 하나입니다.
다음 스니펫은 샘플 요청을 보여줍니다.
POST /token HTTP/1.1
Host: oauth2.googleapis.com
Content-Type: application/x-www-form-urlencoded

code=4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&
client_id=your_client_id&
client_secret=your_client_secret&
redirect_uri=http://127.0.0.1:9004&
grant_type=authorization_code
Google은 이 요청에 단기 액세스 토큰과 새로고침 토큰이 포함된 JSON 객체를 반환하여 응답합니다.
응답에는 다음 필드가 포함됩니다.
필드
access_token Google API 요청을 승인하기 위해 애플리케이션에서 전송하는 토큰입니다.
expires_in 액세스 토큰의 남은 수명(초)입니다.
id_token 참고: 이 속성은 요청에 openid, profile, email과 같은 ID 범위가 포함된 경우에만 반환됩니다. 이 값은 사용자에 관한 디지털 서명된 ID 정보가 포함된 JSON 웹 토큰 (JWT)입니다.
refresh_token 새 액세스 토큰을 획득하는 데 사용할 수 있는 토큰입니다. 갱신 토큰은 사용자가 액세스 권한을 취소하거나 갱신 토큰이 만료될 때까지 유효합니다. 설치된 애플리케이션의 경우 항상 갱신 토큰이 반환됩니다.
refresh_token_expires_in 새로고침 토큰의 남은 수명(초)입니다. 이 값은 사용자가 시간 기반 액세스 [https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko#time-based-access]를 부여한 경우에만 설정됩니다.
scope access_token에 의해 부여된 액세스 범위입니다. 공백으로 구분되고 대소문자를 구분하는 문자열 목록으로 표현됩니다.
token_type 반환된 토큰의 유형입니다. 이때 이 필드의 값은 항상 Bearer로 설정됩니다.
중요: 애플리케이션은 애플리케이션의 여러 호출 간에 액세스할 수 있는 안전한 장기 저장 위치에 두 토큰을 모두 저장해야 합니다. 갱신 토큰을 사용하면 만료된 액세스 토큰이 있는 경우 애플리케이션에서 새 액세스 토큰을 가져올 수 있습니다. 따라서 애플리케이션에서 갱신 토큰을 잃으면 애플리케이션이 새 갱신 토큰을 획득할 수 있도록 사용자가 OAuth 2.0 동의 흐름을 반복해야 합니다.
다음 스니펫은 샘플 응답을 보여줍니다.
{
  "access_token": "1/fFAGRNJru1FTz70BzhT3Zg",
  "expires_in": 3920,
  "token_type": "Bearer",
  "scope": "https://www.googleapis.com/auth/drive.metadata.readonly https://www.googleapis.com/auth/calendar.readonly",
  "refresh_token": "1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI"
}
참고: 애플리케이션은 응답에 포함된 인식할 수 없는 필드를 무시해야 합니다.
6단계: 사용자가 부여한 범위 확인
여러 권한 (범위)을 요청할 때 사용자가 앱에 모든 권한을 부여하지 않을 수 있습니다. 앱은 실제로 부여된 범위를 확인하고 일부 권한이 거부된 상황을 적절하게 처리해야 합니다. 일반적으로 거부된 범위를 사용하는 기능을 사용 중지합니다.
하지만 예외도 있습니다. 도메인 전체 권한 위임 [https://support.google.com/a/answer/162106?hl=ko]이 있는 Google Workspace Enterprise 앱 또는 신뢰할 수 있음 [https://support.google.com/a/answer/7281227?hl=ko#zippy=,change-access-from-the-app-list]으로 표시된 앱은 세부 권한 동의 화면을 우회합니다. 이러한 앱의 경우 사용자에게 세부 권한 동의 화면이 표시되지 않습니다. 대신 앱은 요청된 범위를 모두 수신하거나 전혀 수신하지 않습니다.
자세한 내용은 세부 권한 처리 방법 [https://developers.google.com/identity/protocols/oauth2/resources/granular-permissions?hl=ko]을 참고하세요.
사용자가 특정 범위에 대한 액세스 권한을 애플리케이션에 부여했는지 확인하려면 액세스 토큰 응답의 scope 필드를 검사하세요. access_token에 의해 부여된 액세스 범위입니다. 공백으로 구분되고 대소문자를 구분하는 문자열 목록으로 표현됩니다.
예를 들어 다음 샘플 액세스 토큰 응답은 사용자가 읽기 전용 드라이브 활동 및 캘린더 일정 권한에 대한 액세스 권한을 애플리케이션에 부여했음을 나타냅니다.
  {
    "access_token": "1/fFAGRNJru1FTz70BzhT3Zg",
    "expires_in": 3920,
    "token_type": "Bearer",
    "scope": "https://www.googleapis.com/auth/drive.metadata.readonly https://www.googleapis.com/auth/calendar.readonly",
    "refresh_token": "1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI"
  }
Google API 호출
애플리케이션이 액세스 토큰을 획득한 후 API에 필요한 액세스 범위가 부여된 경우 토큰을 사용하여 지정된 사용자 계정을 대신하여 Google API를 호출할 수 있습니다. 이렇게 하려면 access_token 쿼리 매개변수 또는 Authorization HTTP 헤더 Bearer 값을 포함하여 API에 대한 요청에 액세스 토큰을 포함합니다. 가능한 경우 HTTP 헤더를 사용하는 것이 좋습니다. 쿼리 문자열은 서버 로그에 표시되는 경향이 있기 때문입니다. 대부분의 경우 클라이언트 라이브러리를 사용하여 Google API 호출을 설정할 수 있습니다 (예: Drive Files API 호출 [https://developers.google.com/drive/api/v2/reference?hl=ko#Files]).
OAuth 2.0 Playground [https://developers.google.com/oauthplayground/?hl=ko]에서 모든 Google API를 사용해 보고 범위를 확인할 수 있습니다.
HTTP GET 예
Authorization: Bearer HTTP 헤더를 사용하여 drive.files [https://developers.google.com/drive/v2/reference/files/list?hl=ko] 엔드포인트 (Drive Files API)를 호출하는 것은 다음과 같을 수 있습니다. 자체 액세스 토큰을 지정해야 합니다.
GET /drive/v2/files HTTP/1.1
Host: www.googleapis.com
Authorization: Bearer access_token
다음은 access_token 쿼리 문자열 매개변수를 사용하여 인증된 사용자에 대해 동일한 API를 호출하는 것입니다.
GET https://www.googleapis.com/drive/v2/files?access_token=access_token
curl 예
curl 명령줄 애플리케이션으로 이러한 명령어를 테스트할 수 있습니다. 다음은 HTTP 헤더 옵션을 사용하는 예입니다 (권장).
curl -H "Authorization: Bearer access_token" https://www.googleapis.com/drive/v2/files
또는 쿼리 문자열 매개변수 옵션을 사용할 수 있습니다.
curl https://www.googleapis.com/drive/v2/files?access_token=access_token
액세스 토큰 갱신
액세스 토큰은 주기적으로 만료되어 관련 API 요청에 대한 잘못된 사용자 인증 정보가 됩니다. 토큰과 연결된 범위의 오프라인 액세스를 요청한 경우에는 사용자에게 권한을 요청하지 않고 액세스 토큰을 갱신할 수 있습니다 (사용자가 없는 경우 포함).
액세스 토큰을 새로고침하려면 애플리케이션에서 다음 매개변수가 포함된 HTTPS POST 요청을 Google의 승인 서버 (https://oauth2.googleapis.com/token)로 전송합니다.
필드
client_id API Console [https://console.developers.google.com/?hl=ko]에서 가져온 클라이언트 ID입니다.
client_secret API Console [https://console.developers.google.com/?hl=ko]에서 가져온 클라이언트 보안 비밀번호입니다. (client_secret은 Android, iOS 또는 Chrome 애플리케이션으로 등록된 클라이언트의 요청에는 적용되지 않습니다.)
grant_type OAuth 2.0 사양에 정의된 대로 [https://tools.ietf.org/html/rfc6749#section-6] 이 필드의 값은 refresh_token로 설정해야 합니다.
refresh_token 승인 코드 교환에서 반환된 갱신 토큰입니다.
다음 스니펫은 샘플 요청을 보여줍니다.
POST /token HTTP/1.1
Host: oauth2.googleapis.com
Content-Type: application/x-www-form-urlencoded

client_id=your_client_id&
client_secret=your_client_secret&
refresh_token=refresh_token&
grant_type=refresh_token
사용자가 애플리케이션에 부여된 액세스 권한을 취소하지 않는 한 토큰 서버는 새 액세스 토큰이 포함된 JSON 객체를 반환합니다. 다음 스니펫은 샘플 응답을 보여줍니다.
{
  "access_token": "1/fFAGRNJru1FTz70BzhT3Zg",
  "expires_in": 3920,
  "scope": "https://www.googleapis.com/auth/drive.metadata.readonly https://www.googleapis.com/auth/calendar.readonly",
  "token_type": "Bearer"
}
발급되는 갱신 토큰 수에는 제한이 있습니다. 클라이언트/사용자 조합당 하나의 제한이 있고 모든 클라이언트에서 사용자당 하나의 제한이 있습니다. 갱신 토큰은 장기 스토리지에 저장하고 유효한 동안 계속 사용해야 합니다. 애플리케이션에서 너무 많은 갱신 토큰을 요청하면 이러한 한도에 도달할 수 있으며, 이 경우 이전 갱신 토큰이 작동하지 않습니다.
토큰 취소
사용자가 애플리케이션에 부여된 액세스 권한을 취소하고 싶어 하는 경우도 있습니다. 사용자는 계정 설정 [https://myaccount.google.com/permissions?hl=ko]을 방문하여 액세스 권한을 취소할 수 있습니다. 자세한 내용은 내 계정에 액세스할 수 있는 서드 파티 사이트 및 앱의 사이트 또는 앱 액세스 권한 삭제 섹션 [https://support.google.com/accounts/answer/3466521?hl=ko#remove-access] 지원 문서를 참고하세요.
애플리케이션이 자신에게 부여된 액세스 권한을 프로그래매틱 방식으로 취소할 수도 있습니다. 프로그래매틱 취소는 사용자가 구독을 취소하거나 애플리케이션을 삭제하거나 앱에 필요한 API 리소스가 크게 변경된 경우에 중요합니다. 즉, 삭제 프로세스의 일부에는 이전에 애플리케이션에 부여된 권한이 삭제되도록 하는 API 요청이 포함될 수 있습니다.
프로그래매틱 방식으로 토큰을 취소하려면 애플리케이션이 https://oauth2.googleapis.com/revoke에 요청을 보내고 토큰을 매개변수로 포함합니다.
curl -d -X -POST --header "Content-type:application/x-www-form-urlencoded" \
        https://oauth2.googleapis.com/revoke?token={token}
토큰은 액세스 토큰 또는 갱신 토큰일 수 있습니다. 토큰이 액세스 토큰이고 해당 갱신 토큰이 있는 경우 갱신 토큰도 취소됩니다.
취소가 성공적으로 처리되면 응답의 HTTP 상태 코드는 200입니다. 오류 조건의 경우 오류 코드와 함께 HTTP 상태 코드 400가 반환됩니다.
참고: 취소 응답이 성공한 후 취소가 완전히 적용되기까지 시간이 걸릴 수 있습니다.
앱 리디렉션 메서드
맞춤 URI 스킴 (Android, iOS, UWP)
맞춤 URI 스킴은 맞춤 정의 스킴을 사용하여 앱을 여는 딥 링크의 한 형태입니다.
중요: 맞춤 URI 스킴은 더 이상 새 Chrome 앱에서 지원되지 않으며 앱 명의 도용 위험으로 인해 새 Android 클라이언트에서 기본적으로 사용 중지됩니다.
Android에서 커스텀 URI 스킴을 사용하는 대신
OAuth 2.0 응답을 앱에 직접 전달하여 리디렉션 URI가 필요하지 않은 권장되는 대안 [https://developer.android.com/identity/authorization?hl=ko]을 사용하세요.
Google ID 서비스 Android 라이브러리로 이전하는 방법
커스텀 URI 스킴 사용 설정
권장되는 대안이 작동하지 않는 경우 아래 안내에 따라 Android 클라이언트에 맞게 맞춤 URI 스킴을 사용 설정할 수 있습니다.
OAuth 2.0 사용자 인증 정보 [https://console.cloud.google.com/apis/credentials?hl=ko] 목록으로 이동하여 Android 클라이언트를 선택합니다.
고급 설정 섹션으로 이동하여 맞춤 URI 스킴 사용 설정 체크박스를 선택하고 저장을 클릭하여 맞춤 URI 스킴 지원을 사용 설정합니다.
Chrome 앱에서 맞춤 URI 스킴을 사용하는 대신
OAuth 2.0 응답을 앱에 직접 전달하여 리디렉션 URI가 필요하지 않도록 하는 Chrome ID API [https://developer.chrome.com/docs/extensions/mv3/tut_oauth/?hl=ko]를 사용합니다.
루프백 IP 주소 (macOS, Linux, Windows 데스크톱)
중요: 루프백 IP 주소 리디렉션 옵션은 Android, Chrome 앱, iOS OAuth 클라이언트 유형에서 지원 중단되었습니다. 지원되는 대체 항목으로 이전하는 방법에 관한 안내는 루프백 IP 주소 이전 가이드 [https://developers.google.com/identity/protocols/oauth2/resources/loopback-migration?hl=ko]를 참고하세요.
이 URL을 사용하여 승인 코드를 수신하려면 애플리케이션이 로컬 웹 서버에서 수신 대기해야 합니다. 이 기능은 일부 플랫폼에서만 사용할 수 있습니다. 하지만 플랫폼에서 지원하는 경우 승인 코드를 획득하는 데 권장되는 메커니즘입니다.
앱이 승인 응답을 수신하면 최적의 유용성을 위해 브라우저를 닫고 앱으로 돌아가도록 사용자에게 안내하는 HTML 페이지를 표시하여 응답해야 합니다.
권장 사용 사례 macOS, Linux, Windows 데스크톱 (범용 Windows 플랫폼 제외) 앱
양식 값 애플리케이션 유형을 데스크톱 앱으로 설정합니다.
참고: 루프백 IP 주소에 관한 자세한 내용은 redirect_uri [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#request-parameter-redirect_uri] 매개변수 정의를 참고하세요. 루프백 IP 대신 localhost를 사용할 수도 있지만 이 구성은 클라이언트 방화벽에 문제를 일으킬 수 있습니다. 대부분의 방화벽에서 루프백 통신을 허용합니다.
수동 복사/붙여넣기 (지원 중단됨)
중요: 대역 외 (OOB) 리디렉션 방법이라고도 하는 수동 복사/붙여넣기 옵션은 더 이상 지원되지 않습니다 [https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html]. 안전한 대안으로 이전하는 방법에 관한 안내는 OOB 이전 가이드 [https://developers.google.com/identity/protocols/oauth2/resources/oob-migration?hl=ko]를 참고하세요.
앱 보호
앱 소유권 확인 (Android, Chrome)
애플리케이션의 소유권을 확인하여 앱 사칭 위험을 줄일 수 있습니다.
--- 탭: Android [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#android] ---
참고: Android 앱 소유권 확인은 Google Play 앱에만 사용할 수 있습니다.
      

      
        인증 절차를 완료하려면 Google Play 개발자 계정이 있고 앱이 Google Play Console [https://play.google.com/console/?hl=ko]에 등록되어 있는 경우 해당 계정을 사용하면 됩니다. 인증을 성공적으로 완료하려면 다음 요구사항을 충족해야 합니다.
      

      
        
          확인을 완료하려는 Android OAuth 클라이언트와 패키지 이름 및 SHA-1 서명 인증서 지문이 동일한 애플리케이션이 Google Play Console에 등록되어 있어야 합니다.
        
        
          Google Play Console에서 앱에 대한 관리자 권한이 있어야 합니다.
          Google Play Console의 액세스 관리에 대해 자세히 알아보기 [https://support.google.com/googleplay/android-developer/answer/9844686?hl=ko]
        
      

      
        Android 클라이언트의 앱 소유권 확인 섹션에서 소유권 확인 버튼을 클릭하여 확인 절차를 완료합니다.
      

      
        인증에 성공하면 인증 프로세스가 성공했음을 확인하는 알림이 표시됩니다. 그렇지 않으면 오류 메시지가 표시됩니다.
      

      인증 실패를 해결하려면 다음을 시도해 보세요.

      
        
          확인하려는 앱이 Google Play Console에 등록된 앱인지 확인합니다.
        
        
          Google Play Console에서 앱에 대한 관리자 권한이 있는지 확인합니다.

--- 탭: Chrome [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#chrome] ---
인증 절차를 완료하려면 Chrome 웹 스토어 개발자 계정을 사용해야 합니다.
        인증을 받으려면 다음 요구사항을 충족해야 합니다.
      

      
        
          인증을 완료하려는 Chrome 확장 프로그램 OAuth 클라이언트와 동일한 항목 ID를 가진 항목이 Chrome 웹 스토어 개발자 대시보드 [https://chrome.google.com/webstore/devconsole/?hl=ko]에 등록되어 있어야 합니다.
        
        
          Chrome 웹 스토어 항목의 게시자여야 합니다.
          Chrome 웹 스토어 개발자 대시보드의 액세스 관리에 대해 자세히 알아보세요 [https://developer.chrome.com/docs/webstore/group-publishers/?hl=ko].
        
      

      
        Chrome 확장 프로그램 클라이언트의 앱 소유권 확인 섹션에서 소유권 확인 버튼을 클릭하여 확인 절차를 완료합니다.
      

      
        참고: 계정에 대한 액세스 권한을 부여한 후 인증 절차를 완료하기까지 몇 분 정도 기다립니다.
      

      
        인증에 성공하면 인증 프로세스가 성공했음을 확인하는 알림이 표시됩니다. 그렇지 않으면 오류 메시지가 표시됩니다.
      

      인증 실패를 해결하려면 다음을 시도해 보세요.

      
        
          인증을 완료하려는 Chrome 확장 프로그램 OAuth 클라이언트와 동일한 항목 ID를 가진 등록된 항목이 Chrome 웹 스토어 개발자 대시보드에 있어야 합니다.
        
        
          앱의 게시자여야 합니다. 즉, 앱의 개인 게시자이거나 앱의 그룹 게시자 회원이어야 합니다.
          Chrome 웹 스토어 개발자 대시보드의 액세스 관리에서 자세히 알아보기 [https://developer.chrome.com/docs/webstore/group-publishers/?hl=ko]
        
        
          그룹 게시자 목록을 업데이트한 경우 Chrome 웹 스토어 개발자 대시보드에서 그룹 게시자 회원 목록이 동기화되었는지 확인합니다.
          게시자 멤버십 목록 동기화에 대해 자세히 알아보기 [https://developer.chrome.com/docs/webstore/group-publishers/?hl=ko#adding-developers-to-or-removing-them-from-the-group-publisher]
앱 체크 (iOS만 해당)
앱 체크 [https://developers.google.com/identity/sign-in/ios/appcheck?hl=ko] 기능은 Apple의 App Attest 서비스 [https://developer.apple.com/documentation/devicecheck/establishing_your_app_s_integrity]를 사용하여 Google OAuth 2.0 엔드포인트에 대한 요청이 인증된 애플리케이션에서 발생했는지 확인하여 iOS 애플리케이션을 무단 사용으로부터 보호합니다. 이렇게 하면 앱 사칭 위험을 줄일 수 있습니다.
iOS 클라이언트에서 앱 체크 사용 설정
iOS 클라이언트에서 앱 체크를 사용 설정하려면 다음 요구사항을 충족해야 합니다.
iOS 클라이언트의 팀 ID를 지정해야 합니다.
번들 ID는 두 개 이상의 앱으로 해석될 수 있으므로 와일드 카드를 사용하면 안 됩니다. 즉, 번들 ID에 별표 (*) 기호가 포함되어서는 안 됩니다.
경고: 앱 체크를 사용 설정하면 새 클라이언트를 만들지 않고는 OAuth 클라이언트 번들 ID를 수정할 수 없습니다. iOS 클라이언트를 만들거나 앱 체크를 사용 설정하기 전에 올바른 번들 ID를 사용하고 있는지 확인하세요. 번들 ID를 리디렉션 URI로 사용하는 경우 기존 프로젝트의 번들 ID를 업데이트하면 앱 사용자의 환경이 중단될 수 있습니다.
앱 체크를 사용 설정하려면 iOS 클라이언트의 수정 보기에서 Firebase 앱 체크를 사용하여 OAuth 클라이언트가 악용되지 않도록 보호 전환 버튼을 사용 설정합니다.
앱 체크를 사용 설정하면 OAuth 클라이언트의 수정 보기에서 클라이언트의 OAuth 요청과 관련된 측정항목이 표시됩니다. 앱 체크를 적용 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#enforce-app-check]하기 전에는 인증되지 않은 소스의 요청이 차단되지 않습니다. 측정항목 모니터링 페이지의 정보를 통해 언제 시정 조치를 시작해야 하는지 확인할 수 있습니다.
iOS 앱에 App Check를 사용 설정할 때 App Check 기능과 관련된 오류가 표시될 수 있습니다. 이러한 오류를 수정하려면 다음을 시도해 보세요.
지정한 번들 ID와 팀 ID가 유효한지 확인합니다.
번들 ID에 와일드 카드를 사용하지 않는지 확인합니다.
iOS 클라이언트에 앱 체크 적용
앱에 앱 체크를 사용 설정해도 인식되지 않은 요청이 자동으로 차단되지는 않습니다. 이 보호 조치를 적용하려면 iOS 클라이언트의 수정 보기로 이동하세요. 페이지 오른쪽의 iOS용 Google ID 섹션에 앱 체크 측정항목이 표시됩니다. 측정항목에는 다음 정보가 포함됩니다.
확인된 요청 수 - 유효한 앱 체크 토큰이 있는 요청입니다. 앱 체크 적용을 사용 설정하면 이 카테고리의 요청만 성공합니다.
확인되지 않은 요청 수: 오래된 클라이언트 요청일 수 있음 - 앱 체크 토큰이 누락된 요청입니다. 이러한 요청은 앱 체크 구현이 포함되지 않은 이전 버전의 앱에서 전송되었을 수 있습니다.
확인되지 않은 요청 수: 알 수 없는 출처 요청 - 앱 체크 토큰이 없고 앱에서 전송된 것으로 보이지 않는 요청입니다.
확인되지 않은 요청 수: 잘못된 요청 - 잘못된 앱 체크 토큰이 있는 요청이며, 앱을 가장하려고 시도하는 허위 클라이언트 또는 에뮬레이션된 환경에서 전송되었을 수 있습니다.
이러한 측정항목을 검토하여 앱 체크 적용이 사용자에게 어떤 영향을 미치는지 알아보세요.
App Check를 적용하려면 적용 버튼을 클릭하고 선택한 내용을 확인합니다. 적용이 활성화되면 클라이언트의 확인되지 않은 모든 요청이 거부됩니다.
참고: 적용을 사용 설정한 후 변경사항이 적용되기까지 최대 15분이 걸릴 수 있습니다.
iOS 클라이언트의 앱 체크 적용 해제
앱에 앱 체크를 적용 해제하면 적용 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#enforce-app-check]이 중지되고 확인되지 않은 요청을 포함하여 클라이언트의 Google OAuth 2.0 엔드포인트에 대한 모든 요청이 허용됩니다.
iOS 클라이언트의 앱 확인을 적용하지 않으려면 iOS 클라이언트의 수정 보기로 이동하여 적용 안 함 버튼을 클릭하고 선택을 확인합니다.
참고: 앱 확인을 적용 해제한 후 변경사항이 적용되기까지 최대 15분이 걸릴 수 있습니다.
iOS 클라이언트의 앱 체크 사용 중지
앱의 앱 체크를 사용 중지하면 모든 앱 체크 모니터링 및 강제 시행 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#enforce-app-check]이 중지됩니다. 대신 앱 체크를 강제 적용하지 않음 [https://developers.google.com/identity/protocols/oauth2/native-app?hl=ko#unenforce-app-check]으로 설정하여 클라이언트의 측정항목을 계속 모니터링하는 것이 좋습니다.
iOS 클라이언트의 앱 체크를 사용 중지하려면 iOS 클라이언트의 수정 보기로 이동하여 Firebase 앱 체크를 사용해 OAuth 클라이언트가 악용되지 않도록 보호 전환 버튼을 사용 중지합니다.
참고: 앱 확인을 사용 중지한 후 변경사항이 적용되기까지 최대 15분이 걸릴 수 있습니다.
시간 기반 액세스
시간 기반 액세스를 사용하면 사용자가 특정 작업을 완료하기 위해 제한된 기간 동안 앱에 데이터 액세스 권한을 부여할 수 있습니다. 동의 흐름 중에 일부 Google 제품에서 시간 기반 액세스를 사용할 수 있으며, 사용자는 제한된 기간 동안 액세스 권한을 부여할 수 있습니다. 예를 들어 일회성 데이터 전송을 지원하는 Data Portability API [https://developers.google.com/data-portability?hl=ko]가 있습니다.
사용자가 애플리케이션에 시간 기반 액세스 권한을 부여하면 지정된 기간이 지난 후 갱신 토큰이 만료됩니다. 특정 상황에서는 갱신 토큰이 더 일찍 무효화될 수 있습니다. 자세한 내용은 이 사례 [https://developers.google.com/identity/protocols/oauth2?hl=ko#expiration]를 참고하세요. 승인 코드 교환 [https://developers.google.com/identity/protocols/oauth2/web-server?hl=ko#httprest_3] 응답에서 반환되는 refresh_token_expires_in 필드는 이러한 경우 갱신 토큰이 만료될 때까지 남은 시간을 나타냅니다.
추가 자료
IETF 현재 권장사항 네이티브 앱용 OAuth 2.0 [https://tools.ietf.org/html/rfc8252]에서는 여기에 설명된 많은 권장사항을 설정합니다.
계정 간 보안 구현
사용자 계정을 보호하기 위해 취해야 하는 추가 단계는 Google의 교차 계정 보호 서비스를 활용하여 교차 계정 보호를 구현하는 것입니다. 이 서비스를 사용하면 사용자 계정의 주요 변경사항에 관한 정보를 애플리케이션에 제공하는 보안 이벤트 알림을 구독할 수 있습니다. 그런 다음 이 정보를 사용하여 이벤트에 어떻게 대응할지 결정한 후 조치를 취할 수 있습니다.
Google의 교차 계정 보호 서비스에서 앱으로 전송하는 이벤트 유형의 예는 다음과 같습니다.
https://schemas.openid.net/secevent/risc/event-type/sessions-revoked
https://schemas.openid.net/secevent/oauth/event-type/token-revoked
https://schemas.openid.net/secevent/risc/event-type/account-disabled
교차 계정 보호를 구현하는 방법과 사용 가능한 이벤트의 전체 목록은 교차 계정 보호로 사용자 계정 보호 페이지 [https://developers.google.com/identity/protocols/risc?hl=ko]를 참고하세요.