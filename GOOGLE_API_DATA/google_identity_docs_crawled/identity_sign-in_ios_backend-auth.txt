[2025-07-25] Source URL: https://developers.google.com/identity/sign-in/ios/backend-auth

중요: 2024년 5월 1일 [https://developer.apple.com/news/?id=3d8a9yyh]부터 Apple에서는 GoogleSignIn-iOS와 같이 흔히 사용되는 SDK를 사용하는 iOS 애플리케이션의 개인 정보 보호 매니페스트 및 서명을 요구 [https://developer.apple.com/support/third-party-SDK-requirements/]합니다. 2024년 5월 1일 전에 GoogleSignIn-iOS v7.1.0 이상으로 업그레이드하세요. 업그레이드 가이드 [https://developers.google.com/identity/sign-in/ios/quick-migration-guide?hl=ko]를 따르세요.
이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
홈 [https://developers.google.com/?hl=ko]
제품 [https://developers.google.com/products?hl=ko]
Google Identity [https://developers.google.com/identity?hl=ko]
Authentication [https://developers.google.com/identity/authentication?hl=ko]
시작하기 [https://developers.google.com/identity/sign-in/ios/start-integrating?hl=ko]
의견 보내기
백엔드 서버에서 인증
bookmark_border
이 페이지의 내용
서버에 ID 토큰 전송 [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#send-the-id-token-to-your-server]
ID 토큰의 무결성 확인 [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#verify-the-integrity-of-the-id-token]
Google API 클라이언트 라이브러리 사용 [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#using-a-google-api-client-library]
tokeninfo 엔드포인트 호출 [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#calling-the-tokeninfo-endpoint]
계정 또는 세션 만들기 [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#create-an-account-or-session]
교차 계정 보호로 사용자 계정 보호 [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#securing-your-users-accounts-with-cross-account-protection]
백엔드와 통신하는 앱 또는 사이트에서 Google 로그인을 사용하는 경우 서버에 현재 로그인한 사용자의 신원을 확인해야 할 수 있습니다. 이를 위해 사용자가 정상적으로 로그인한 후에 사용자의 HTTPS를 사용하여 서버에 ID 토큰을 전달합니다. 그런 다음 서버에서 무결성을 확인합니다. 토큰에 포함된 사용자 정보를 사용하여 새로운 계정을 생성합니다.
경고: 일반 사용자 ID는 허용되지 않습니다. 백엔드에서 GIDGoogleUser.userID property를 사용하여 얻을 수 있는 것과 같은 것을 예로 들 수 있습니다. 있습니다. 수정된 클라이언트 애플리케이션은 임의의 사용자 ID를 사용자를 가장할 수 있으므로 검증 가능한 ID 토큰을 대신 사용하여 서버 측에서 로그인한 사용자의 사용자 ID를 안전하게 가져올 수 있습니다.
서버에 ID 토큰 전송
사용자가 로그인하면 사용자의 ID 토큰을 가져옵니다.
--- 탭: Swift [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#swift] ---
GIDSignIn.sharedInstance.signIn(withPresenting: self) { signInResult, error in
    guard error == nil else { return }
    guard let signInResult = signInResult else { return }

    signInResult.user.refreshTokensIfNeeded { user, error in
        guard error == nil else { return }
        guard let user = user else { return }

        let idToken = user.idToken
        // Send ID token to backend (example below).
    }
}

--- 탭: Objective-C [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#objective-c] ---
[GIDSignIn.sharedInstance signInWithPresentingViewController:self
                                              completion:^(GIDSignInResult * _Nullable signInResult,
                                                           NSError * _Nullable error) {
      if (error) { return; }
      if (signInResult == nil) { return; }

      [signInResult.user refreshTokensIfNeededWithCompletion:^(GIDGoogleUser * _Nullable user,
                                                               NSError * _Nullable error) {
          if (error) { return; }
          if (user == nil) { return; }

          NSString *idToken = user.idToken;
          // Send ID token to backend (example below).
      }];
}];
그런 다음 HTTPS POST 요청을 사용하여 서버에 ID 토큰을 전송합니다.
--- 탭: Swift [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#swift] ---
func tokenSignInExample(idToken: String) {
    guard let authData = try? JSONEncoder().encode(["idToken": idToken]) else {
        return
    }
    let url = URL(string: "https://yourbackend.example.com/tokensignin")!
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.setValue("application/json", forHTTPHeaderField: "Content-Type")

    let task = URLSession.shared.uploadTask(with: request, from: authData) { data, response, error in
        // Handle response from your backend.
    }
    task.resume()
}

--- 탭: Objective-C [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#objective-c] ---
NSString *signinEndpoint = @"https://yourbackend.example.com/tokensignin";
NSDictionary *params = @{@"idtoken": idToken};

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:signinEndpoint];
[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
[request setHTTPMethod:@"POST"];
[request setHTTPBody:[self httpBodyForParamsDictionary:params]];

NSOperationQueue *queue = [[NSOperationQueue alloc] init];
[NSURLConnection sendAsynchronousRequest:request
                                   queue:queue
                       completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {
                         if (error) {
                           NSLog(@"Error: %@", error.localizedDescription);
                         } else {
                           NSLog(@"Signed in as %@", data.bytes);
                         }
                       }];
ID 토큰의 무결성 확인
HTTPS POST를 통해 ID 토큰을 수신한 후에는 토큰의 무결성을 확인해야 합니다.
토큰이 유효한지 확인하려면 다음 기준을 충족해야 합니다.
ID 토큰이 Google에서 올바르게 서명되었습니다. Google의 공개 키(JWK [https://www.googleapis.com/oauth2/v3/certs] 또는 PEM [https://www.googleapis.com/oauth2/v1/certs] 형식으로 제공)를 사용하여 토큰의 서명을 확인합니다. 이러한 키는 정기적으로 순환됩니다. 응답의 Cache-Control 헤더를 검사하여 다시 가져와야 하는 시점을 확인하세요.
ID 토큰의 aud 값이 앱의 클라이언트 ID 중 하나와 같습니다. 이 확인은 악성 앱에 발급된 ID 토큰이 앱의 백엔드 서버에서 동일한 사용자에 관한 데이터에 액세스하는 데 사용되지 않도록 하는 데 필요합니다.
ID 토큰의 iss 값은 accounts.google.com 또는 https://accounts.google.com와 같습니다.
ID 토큰의 만료 시간 (exp)이 지나지 않았습니다.
ID 토큰이 Google Workspace 또는 Cloud 조직 계정을 나타내는지 확인해야 하는 경우 사용자의 호스팅 도메인을 나타내는 hd 클레임을 확인할 수 있습니다. 특정 도메인의 구성원에게만 리소스 액세스를 제한할 때 사용해야 합니다. 이 클레임이 없으면 계정이 Google 호스팅 도메인에 속하지 않음을 나타냅니다.
email, email_verified, hd 필드를 사용하여 Google에서 이메일 주소를 호스팅하고 이메일 주소에 대한 권한이 있는지 확인할 수 있습니다. Google이 권한이 있는 경우 사용자가 합법적인 계정 소유자로 알려져 있으므로 비밀번호 또는 기타 챌린지 방법을 건너뛸 수 있습니다.
Google이 권위자인 경우:
email에 @gmail.com 접미사가 있는 경우 Gmail 계정입니다.
email_verified이 true이고 hd이 설정된 경우 Google Workspace 계정입니다.
사용자는 Gmail 또는 Google Workspace를 사용하지 않고도 Google 계정에 등록할 수 있습니다. email에 @gmail.com 접미사가 포함되지 않고 hd이 없는 경우 Google은 권위가 없으며 비밀번호 또는 기타 챌린지 방법을 사용하여 사용자를 인증하는 것이 좋습니다. Google 계정이 생성될 때 Google에서 사용자를 처음 인증했으므로 email_verified가 true일 수도 있지만, 이후 서드 파티 이메일 계정의 소유권이 변경되었을 수 있습니다.
이러한 확인 단계를 실행하는 코드를 직접 작성하는 대신 플랫폼용 Google API 클라이언트 라이브러리 또는 범용 JWT 라이브러리를 사용하는 것이 좋습니다. 개발 및 디버깅을 위해 tokeninfo 검증 엔드포인트를 호출할 수 있습니다.
Google API 클라이언트 라이브러리 사용
Google API 클라이언트 라이브러리 [https://developers.google.com/api-client-library?hl=ko] 중 하나 (예: 자바 [https://github.com/googleapis/google-auth-library-java], Node.js [https://github.com/google/google-api-nodejs-client] PHP [https://developers.google.com/api-client-library/php/start/get_started?hl=ko] Python [https://google-auth.readthedocs.io/]) 프로덕션 환경에서 Google ID 토큰의 유효성을 검사하는 데 권장되는 방법입니다.
<ph type="x-smartling-placeholder">
--- 탭: 자바 [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#%EC%9E%90%EB%B0%94] ---
</ph>
      
      Java에서 ID 토큰의 유효성을 검사하려면 GoogleIdTokenVerifier [https://github.com/googleapis/google-api-java-client/blob/master/google-api-client/src/main/java/com/google/api/client/googleapis/auth/oauth2/GoogleIdTokenVerifier.java] 객체에 대한 호출을 확인할 수 있습니다. 예를 들면 다음과 같습니다.
      import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;

...

GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)
    // Specify the WEB_CLIENT_ID of the app that accesses the backend:
    .setAudience(Collections.singletonList(WEB_CLIENT_ID))
    // Or, if multiple clients access the backend:
    //.setAudience(Arrays.asList(WEB_CLIENT_ID_1, WEB_CLIENT_ID_2, WEB_CLIENT_ID_3))
    .build();

// (Receive idTokenString by HTTPS POST)

GoogleIdToken idToken = verifier.verify(idTokenString);
if (idToken != null) {
  Payload payload = idToken.getPayload();

  // Print user identifier
  String userId = payload.getSubject();
  System.out.println("User ID: " + userId);

  // Get profile information from payload
  String email = payload.getEmail();
  boolean emailVerified = Boolean.valueOf(payload.getEmailVerified());
  String name = (String) payload.get("name");
  String pictureUrl = (String) payload.get("picture");
  String locale = (String) payload.get("locale");
  String familyName = (String) payload.get("family_name");
  String givenName = (String) payload.get("given_name");

  // Use or store profile information
  // ...

} else {
  System.out.println("Invalid ID token.");
}
      GoogleIdTokenVerifier.verify() 메서드가 JWT를 확인합니다.
        서명, aud 클레임, iss 클레임 및
        exp 소유권 주장.
      ID 토큰이 Google Workspace 또는 Cloud를 나타내는지 확인해야 하는 경우
        조직 계정의 경우 도메인 이름을 확인하여 hd 소유권 주장을 확인할 수 있습니다.
        Payload.getHostedDomain() 메서드에서 반환됩니다. 
        소유권 주장 email건이 계정을 도메인에서 관리하기에 충분하지 않습니다.
        또는 조직이나 그 안에서 활용할 수 있습니다.

--- 탭: Node.js [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#node.js] ---
</ph>
      
      Node.js에서 ID 토큰을 검증하려면 Node.js용 Google 인증 라이브러리 [https://github.com/google/google-auth-library-nodejs]를 사용하세요.
        라이브러리를 설치합니다.
        npm install google-auth-library --save 드림
        그런 다음 verifyIdToken() 함수를 호출합니다. 예를 들면 다음과 같습니다.
      const {OAuth2Client} = require('google-auth-library');
const client = new OAuth2Client();
async function verify() {
  const ticket = await client.verifyIdToken({
      idToken: token,
      audience: WEB_CLIENT_ID,  // Specify the WEB_CLIENT_ID of the app that accesses the backend
      // Or, if multiple clients access the backend:
      //[WEB_CLIENT_ID_1, WEB_CLIENT_ID_2, WEB_CLIENT_ID_3]
  });
  const payload = ticket.getPayload();
  const userid = payload['sub'];
  // If the request specified a Google Workspace domain:
  // const domain = payload['hd'];
}
verify().catch(console.error);
      verifyIdToken 함수는
        JWT 서명, aud 클레임, exp 클레임
        및 iss 클레임.
      ID 토큰이 Google Workspace 또는 Cloud를 나타내는지 확인해야 하는 경우
        조직 계정에 대한 hd 클레임을 확인하면
        사용자 도메인입니다. 리소스에 대한 액세스 권한을 구성원으로만 제한할 때 사용해야 합니다.
        특정 도메인의 사용자를
관리할 수 있습니다 이 소유권 주장이 없으면 계정이 다음 항목에 속하지 않음을 나타냅니다.
        Google에서 호스팅하는
도메인일 수 있습니다

--- 탭: PHP [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#php] ---
</ph>
      
      PHP에서 ID 토큰의 유효성을 검사하려면 PHP용 Google API 클라이언트 라이브러리 [https://github.com/google/google-api-php-client/]를 사용합니다.
        라이브러리를 설치합니다 (예: Composer 사용).
        composer require google/apiclient 드림
        그런 다음 verifyIdToken() 함수를 호출합니다. 예를 들면 다음과 같습니다.
      require_once 'vendor/autoload.php';

// Get $id_token via HTTPS POST.

$client = new Google_Client(['client_id' => $WEB_CLIENT_ID]);  // Specify the WEB_CLIENT_ID of the app that accesses the backend
$payload = $client->verifyIdToken($id_token);
if ($payload) {
  $userid = $payload['sub'];
  // If the request specified a Google Workspace domain
  //$domain = $payload['hd'];
} else {
  // Invalid ID token
}
      verifyIdToken 함수는
        JWT 서명, aud 클레임, exp 클레임
        및 iss 클레임.
      ID 토큰이 Google Workspace 또는 Cloud를 나타내는지 확인해야 하는 경우
        조직 계정에 대한 hd 클레임을 확인하면
        사용자 도메인입니다. 리소스에 대한 액세스 권한을 구성원으로만 제한할 때 사용해야 합니다.
        특정 도메인의 사용자를
관리할 수 있습니다 이 소유권 주장이 없으면 계정이 다음 항목에 속하지 않음을 나타냅니다.
        Google에서 호스팅하는
도메인일 수 있습니다

--- 탭: Python [https://developers.google.com/identity/sign-in/ios/backend-auth?hl=ko#python] ---
</ph>
      
      Python에서 ID 토큰의 유효성을 검사하려면
        verify_oauth2_token [https://google-auth.readthedocs.io/en/latest/reference/google.oauth2.id_token.html#google.oauth2.id_token.verify_oauth2_token]
        함수를 사용하세요. 예를 들면 다음과 같습니다.
      from google.oauth2 import id_token
from google.auth.transport import requests

# (Receive token by HTTPS POST)
# ...

try:
    # Specify the WEB_CLIENT_ID of the app that accesses the backend:
    idinfo = id_token.verify_oauth2_token(token, requests.Request(), WEB_CLIENT_ID)

    # Or, if multiple clients access the backend server:
    # idinfo = id_token.verify_oauth2_token(token, requests.Request())
    # if idinfo['aud'] not in [WEB_CLIENT_ID_1, WEB_CLIENT_ID_2, WEB_CLIENT_ID_3]:
    #     raise ValueError('Could not verify audience.')

    # If the request specified a Google Workspace domain
    # if idinfo['hd'] != DOMAIN_NAME:
    #     raise ValueError('Wrong domain name.')

    # ID token is valid. Get the user's Google Account ID from the decoded token.
    userid = idinfo['sub']
except ValueError:
    # Invalid token
    pass
      verify_oauth2_token 함수가 JWT 확인
        서명, aud 클레임, exp 클레임
        hd도 확인해야 합니다.
        배상 청구 (해당되는 경우)를

        verify_oauth2_token가 반환됩니다. 여러 클라이언트가
        백엔드 서버에서 aud 클레임을 수동으로 확인합니다.
tokeninfo 엔드포인트 호출
디버깅을 위해 ID 토큰 서명을 검증하는 쉬운 방법은 tokeninfo 엔드포인트를 사용합니다. 이 엔드포인트를 호출할 때는 IP 주소를 제대로 테스트하면서 대부분의 유효성 검사를 자동으로 수행하는 페이로드 추출을 사용할 수 있습니다. 프로덕션에는 사용하기에 적합하지 않습니다. 요청이 제한되거나 간헐적인 오류가 발생할 수 있기 때문입니다.
tokeninfo 엔드포인트를 사용하여 ID 토큰을 검증하려면 HTTPS를 만드세요. POST 또는 GET 요청을 전송하고 id_token 매개변수 예를 들어 토큰 'XYZ123'의 유효성을 검사하려면 다음 GET 요청을 실행합니다.
https://oauth2.googleapis.com/tokeninfo?id_token=XYZ123
토큰이 올바르게 서명되었고 iss 및 exp이 클레임이 예상값을 갖는 경우 HTTP 200 응답을 받게 됩니다. 여기서 본문은 에는 JSON 형식의 ID 토큰 클레임이 포함됩니다. 응답 예시는 다음과 같습니다.
{
 // These six fields are included in all Google ID Tokens.
 "iss": "https://accounts.google.com",
 "sub": "110169484474386276334",
 "azp": "1008719970978-hb24n2dstb40o45d4feuo2ukqmcc6381.apps.googleusercontent.com",
 "aud": "1008719970978-hb24n2dstb40o45d4feuo2ukqmcc6381.apps.googleusercontent.com",
 "iat": "1433978353",
 "exp": "1433981953",

 // These seven fields are only included when the user has granted the "profile" and
 // "email" OAuth scopes to the application.
 "email": "testuser@gmail.com",
 "email_verified": "true",
 "name" : "Test User",
 "picture": "https://lh4.googleusercontent.com/-kYgzyAWpZzJ/ABCDEFGHI/AAAJKLMNOP/tIXL9Ir44LE/s99-c/photo.jpg",
 "given_name": "Test",
 "family_name": "User",
 "locale": "en"
}
경고: 이러한 소유권 주장이 제기된 후에도 aud 클레임에 앱의 클라이언트 ID 중 하나가 포함되어 있는지 확인합니다. 그렇다면 토큰은 유효하고 클라이언트를 위해 작성되며, sub 클레임에서 가져온 사용자의 고유한 Google ID
ID 토큰이 Google Workspace 계정을 나타내는지 확인해야 하는 경우 다음을 확인할 수 있습니다. 사용자의 호스트 도메인을 나타내는 hd 클레임 다음과 같은 경우에 사용해야 합니다. 리소스에 대한 액세스 권한을 특정 도메인의 구성원으로만 제한 본 클레임의 부재 계정이 Google Workspace 호스팅 도메인에 속하지 않음을 나타냅니다.
계정 또는 세션 만들기
토큰을 확인한 후 사용자가 이미 사용자 데이터베이스에 있는지 확인합니다. 설정된 경우 사용자에 대해 인증된 세션을 설정합니다. 사용자가 사용자 데이터베이스에 없는 경우 정보에서 새 사용자 레코드를 만듭니다. 사용자를 위한 세션을 설정합니다. 앱에서 새로 생성된 사용자를 감지할 때 필요한 추가 프로필 정보를 사용자에게 요청할 수 있습니다.
교차 계정 보호로 사용자 계정 보호
Google을 통해 사용자를 로그인하면 Google에서 사용자 데이터를 보호하기 위해 구축한 모든 보안 기능과 인프라를 자동으로 활용할 수 있습니다. 하지만 사용자의 Google 계정이 도용되거나 다른 심각한 보안 사고가 발생하는 경우 앱이 공격에 취약해질 수 있습니다. 보안 강화를 위해 계정을 해지하지 않으려면 교차 계정 Google의 보안 알림을 수신하기 위한 보호 조치 [https://developers.google.com/identity/protocols/risc?hl=ko]입니다. 이러한 이벤트를 수신하면 사용자의 Google 계정 보안과 관련된 중요한 변경사항을 파악할 수 있으며, 이를 토대로 서비스에서 계정 보안을 강화하는 조치를 취할 수 있습니다.
의견 보내기