[2025-08-29] Source URL: https://developers.google.com/workspace/calendar/api/guides/recurringevents

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
Switch to English
홈 [https://developers.google.com/?hl=ko]
Google Workspace [https://developers.google.com/workspace?hl=ko]
Google Calendar [https://developers.google.com/workspace/calendar?hl=ko]
가이드 [https://developers.google.com/workspace/calendar/api/guides/overview?hl=ko]
의견 보내기
반복 일정
bookmark_border
이 페이지의 내용
반복 일정 만들기 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#creating_recurring_events]
인스턴스 액세스 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#accessing_instances]
인스턴스 수정 또는 삭제 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#modifying_or_deleting_instances]
다음 인스턴스 모두 수정 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#modifying_all_following_instances]
이 문서에서는 반복 일정 [https://developers.google.com/workspace/calendar/concepts/events-calendars?hl=ko#recurring_events]과 해당 인스턴스로 작업하는 방법을 설명합니다.
반복 일정 만들기
반복 일정을 만드는 것은 event [https://developers.google.com/workspace/calendar/v3/reference/events?hl=ko] 리소스의 recurrence [https://developers.google.com/workspace/calendar/v3/reference/events?hl=ko#recurrence] 필드 집합으로 일반 (단일) 일정을 만드는 [https://developers.google.com/workspace/calendar/v3/reference/events/insert?hl=ko] 것과 비슷합니다.
--- 탭: 프로토콜 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C] ---
POST /calendar/v3/calendars/primary/events
...

{
  "summary": "Appointment",
  "location": "Somewhere",
  "start": {
    "dateTime": "2011-06-03T10:00:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "end": {
    "dateTime": "2011-06-03T10:25:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "recurrence": [
    "RRULE:FREQ=WEEKLY;UNTIL=20110701T170000Z",
  ],
  "attendees": [
    {
      "email": "attendeeEmail",
      # Other attendee's data...
    },
    # ...
  ],
}

--- 탭: 자바 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#%EC%9E%90%EB%B0%94] ---
Event event = new Event();

event.setSummary("Appointment");
event.setLocation("Somewhere");

ArrayList<EventAttendee> attendees = new ArrayList<EventAttendee>();
attendees.add(new EventAttendee().setEmail("attendeeEmail"));
// ...
event.setAttendees(attendees);

DateTime start = DateTime.parseRfc3339("2011-06-03T10:00:00.000-07:00");
DateTime end = DateTime.parseRfc3339("2011-06-03T10:25:00.000-07:00");
event.setStart(new EventDateTime().setDateTime(start).setTimeZone("America/Los_Angeles"));
event.setEnd(new EventDateTime().setDateTime(end).setTimeZone("America/Los_Angeles"));
event.setRecurrence(Arrays.asList("RRULE:FREQ=WEEKLY;UNTIL=20110701T170000Z"));

Event recurringEvent = service.events().insert("primary", event).execute();

System.out.println(createdEvent.getId());

--- 탭: .NET [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#.net] ---
Event event = new Event()
    {
      Summary = "Appointment",
      Location = "Somewhere",
      Start = new EventDateTime() {
          DateTime = new DateTime("2011-06-03T10:00:00.000:-07:00")
          TimeZone = "America/Los_Angeles"
      },
      End = new EventDateTime() {
          DateTime = new DateTime("2011-06-03T10:25:00.000:-07:00")
          TimeZone = "America/Los_Angeles"
      },
      Recurrence = new String[] {
          "RRULE:FREQ=WEEKLY;UNTIL=20110701T170000Z"
      },
      Attendees = new List<EventAttendee>()
          {
            new EventAttendee() { Email: "attendeeEmail" },
            // ...
          }
    };

Event recurringEvent = service.Events.Insert(event, "primary").Fetch();

Console.WriteLine(recurringEvent.Id);

--- 탭: Python [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#python] ---
event = {
  'summary': 'Appointment',
  'location': 'Somewhere',
  'start': {
    'dateTime': '2011-06-03T10:00:00.000-07:00',
    'timeZone': 'America/Los_Angeles'
  },
  'end': {
    'dateTime': '2011-06-03T10:25:00.000-07:00',
    'timeZone': 'America/Los_Angeles'
  },
  'recurrence': [
    'RRULE:FREQ=WEEKLY;UNTIL=20110701T170000Z',
  ],
  'attendees': [
    {
      'email': 'attendeeEmail',
      # Other attendee's data...
    },
    # ...
  ],
}

recurring_event = service.events().insert(calendarId='primary', body=event).execute()

print recurring_event['id']

--- 탭: tabpanel-php ---
$event = new Google_Service_Calendar_Event();
$event->setSummary('Appointment');
$event->setLocation('Somewhere');
$start = new Google_Service_Calendar_EventDateTime();
$start->setDateTime('2011-06-03T10:00:00.000-07:00');
$start->setTimeZone('America/Los_Angeles');
$event->setStart($start);
$end = new Google_Service_Calendar_EventDateTime();
$end->setDateTime('2011-06-03T10:25:00.000-07:00');
$end->setTimeZone('America/Los_Angeles');
$event->setEnd($end);
$event->setRecurrence(array('RRULE:FREQ=WEEKLY;UNTIL=20110701T170000Z'));
$attendee1 = new Google_Service_Calendar_EventAttendee();
$attendee1->setEmail('attendeeEmail');
// ...
$attendees = array($attendee1,
                   // ...
                   );
$event->attendees = $attendees;
$recurringEvent = $service->events->insert('primary', $event);

echo $recurringEvent->getId();

--- 탭: tabpanel-ruby ---
event = Google::Apis::CalendarV3::Event.new(
  summary: 'Appointment',
  location: 'Somewhere',
  start: {
    date_time: '2011-06-03T10:00:00.000-07:00',
    time_zone:  'America/Los_Angeles'
  },
  end: {
    date_time: '2011-06-03T10:25:00.000-07:00',
    time_zone: 'America/Los_Angeles'
  },
  recurrence: ['RRULE:FREQ=WEEKLY;UNTIL=20110701T170000Z']
  attendees: [
    {
      email: 'attendeeEmail'
    },
    #...
  ]
)
response = client.insert_event('primary', event)
print response.id
인스턴스 액세스
지정된 인스턴스의 모든 인스턴스 [https://developers.google.com/workspace/calendar/concepts/events-calendars?hl=ko#instances_and_exceptions]를 보고 events.instances() [https://developers.google.com/workspace/calendar/v3/reference/events/instances?hl=ko] 요청을 사용할 수 있습니다.
기본적으로 events.list() [https://developers.google.com/workspace/calendar/v3/reference/events/list?hl=ko] 요청 사용자는 단일 일정, 반복 일정 및 예외 [https://developers.google.com/workspace/calendar/concepts/events-calendars?hl=ko#instances_and_exceptions] 예외가 아닌 인스턴스는 반환되지 않습니다. singleEvents [https://developers.google.com/workspace/calendar/v3/reference/events/list?hl=ko#singleEvents] 매개변수가 true로 설정되면 모든 개별 인스턴스가 결과에 표시되지만 기본적인 반복 일정은 표시되지 않습니다. 한가함/바쁨 권한이 있는 사용자가 events.list()을 쿼리하면 singleEvent가 true인 것처럼 동작합니다. 액세스제어 목록(ACL) 규칙에 대한 자세한 내용은 Acl [https://developers.google.com/calendar/v3/reference/acl?hl=ko]을 참조하세요.
경고: 인스턴스를 수정하려는 경우 개별적으로 수정하지 마세요. 전체 반복 일정 또는 '이번 및 이후 일정' [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#modifying_all_following_instances] 인스턴스 이로 인해 캘린더가 어수선해져서 액세스 속도가 느려지고 많은 수의 사용자에게 보내는 변경 알림을 제공합니다.
개별 인스턴스는 단일 이벤트와 유사합니다. 부모님의 반복 일정과 달리 인스턴스에 recurrence [https://developers.google.com/workspace/calendar/v3/reference/events?hl=ko#recurrence] 필드가 설정되지 않았습니다.
다음은 인스턴스와 관련된 이벤트 필드입니다.
recurringEventId [https://developers.google.com/workspace/calendar/v3/reference/events?hl=ko#recurringEventId]: 이 인스턴스가 속한 상위 반복 이벤트의 ID입니다.
originalStartTime [https://developers.google.com/workspace/calendar/v3/reference/events?hl=ko#originalStartTime] - 상위 반복 일정의 반복 데이터에 따라 이 인스턴스가 시작되는 시간입니다. 이 시간은 인스턴스 일정이 조정된 경우 실제 start [https://developers.google.com/workspace/calendar/v3/reference/events?hl=ko#start] 시간과 다를 수 있습니다. 이는 인스턴스가 이동된 경우에도 반복 일정 반복 내에서 인스턴스를 고유하게 식별합니다.
인스턴스 수정 또는 삭제
단일 인스턴스를 수정하려면 (예외 생성) 클라이언트 애플리케이션에서 먼저 인스턴스를 검색한 다음 본문의 업데이트된 데이터가 있는 인스턴스 수정 URL로 승인된 PUT 요청을 전송하여 인스턴스를 업데이트해야 합니다. URL 형식은 다음과 같습니다.
https://www.googleapis.com/calendar/v3/calendars/calendarId/events/instanceId
calendarId 및 instanceId 대신 적절한 값을 사용합니다.
참고: 특수한 calendarId 값 primary을 사용하여 인증된 사용자의 기본 캘린더를 참조할 수 있습니다.
성공하면 서버는 업데이트된 인스턴스와 함께 HTTP 200 OK 상태 코드로 응답합니다. 다음 예는 반복 일정의 인스턴스를 취소하는 방법을 보여줍니다.
--- 탭: 프로토콜 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C] ---
PUT /calendar/v3/calendars/primary/events/instanceId
...

{
  "kind": "calendar#event",
  "id": "instanceId",
  "etag": "instanceEtag",
  "status": "cancelled",
  "htmlLink": "https://www.google.com/calendar/event?eid=instanceEid",
  "created": "2011-05-23T22:27:01.000Z",
  "updated": "2011-05-23T22:27:01.000Z",
  "summary": "Recurring event",
  "location": "Somewhere",
  "creator": {
    "email": "userEmail"
  },
  "recurringEventId": "recurringEventId",
  "originalStartTime": "2011-06-03T10:00:00.000-07:00",
  "organizer": {
    "email": "userEmail",
    "displayName": "userDisplayName"
  },
  "start": {
    "dateTime": "2011-06-03T10:00:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "end": {
    "dateTime": "2011-06-03T10:25:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "iCalUID": "eventUID",
  "sequence": 0,
  "attendees": [
    {
      "email": "attendeeEmail",
      "displayName": "attendeeDisplayName",
      "responseStatus": "needsAction"
    },
    # ...
    {
      "email": "userEmail",
      "displayName": "userDisplayName",
      "responseStatus": "accepted",
      "organizer": true,
      "self": true
    }
  ],
  "guestsCanInviteOthers": false,
  "guestsCanSeeOtherGuests": false,
  "reminders": {
    "useDefault": true
  }
}

--- 탭: 자바 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#%EC%9E%90%EB%B0%94] ---
// First retrieve the instances from the API.
Events instances = service.events().instances("primary", "recurringEventId").execute();

// Select the instance to cancel.
Event instance = instances.getItems().get(0);
instance.setStatus("cancelled");

Event updatedInstance = service.events().update("primary", instance.getId(), instance).execute();

// Print the updated date.
System.out.println(updatedInstance.getUpdated());

--- 탭: .NET [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#.net] ---
// First retrieve the instances from the API.
Events instances = service.Events.Instances("primary", "recurringEventId").Fetch();

// Select the instance to cancel.
Event instance = instances.Items[0];
instance.Status = "cancelled";

Event updatedInstance = service.Events.Update(instance, "primary", instance.Id).Fetch();

// Print the updated date.
Console.WriteLine(updatedInstance.Updated);

--- 탭: Python [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#python] ---
# First retrieve the instances from the API.
instances = service.events().instances(calendarId='primary', eventId='recurringEventId').execute()

# Select the instance to cancel.
instance = instances['items'][0]
instance['status'] = 'cancelled'

updated_instance = service.events().update(calendarId='primary', eventId=instance['id'], body=instance).execute()

# Print the updated date.
print updated_instance['updated']

--- 탭: tabpanel-php ---
$events = $service->events->instances("primary", "eventId");

// Select the instance to cancel.
$instance = $events->getItems()[0];
$instance->setStatus('cancelled');

$updatedInstance = $service->events->update('primary', $instance->getId(), $instance);

// Print the updated date.
echo $updatedInstance->getUpdated();

--- 탭: tabpanel-ruby ---
# First retrieve the instances from the API.
instances = client.list_event_instances('primary', 'recurringEventId')

# Select the instance to cancel.
instance = instances.items[0]
instance.status = 'cancelled'

response = client.update_event('primary', instance.id, instance)
print response.updated
다음 인스턴스 모두 수정
특정 (타겟) 인스턴스 이후 또는 그 이후에 반복되는 일정의 모든 인스턴스를 변경하려면 두 가지 별도의 API 요청을 해야 합니다. 이러한 요청은 원래 반복 일정을 두 개로 분할합니다. 변경 없이 인스턴스가 유지된 원래 일정과 새 반복 일정에는 변경사항이 적용되는 인스턴스: <ph type="x-smartling-placeholder">
</ph>
events.update() [https://developers.google.com/workspace/calendar/v3/reference/events/update?hl=ko]를 호출하여 다음을 수행합니다. 업데이트할 인스턴스의 원래 반복 일정을 자릅니다. 이렇게 하려면 RRULE의 UNTIL 구성요소가 시작 시간 전을 가리킵니다. 첫 번째 대상 인스턴스를 생성합니다 또는 COUNT 구성요소를 설정할 수 있습니다. UNTIL입니다.
events.insert() [https://developers.google.com/workspace/calendar/v3/reference/events/insert?hl=ko]를 호출하여 다음을 수행합니다. 원래 일정과 동일한 데이터를 사용하여 새 반복 일정을 만듭니다. 단, 변경할 수 있습니다. 새 반복 일정의 시작 시간은 다음과 같아야 합니다. 대상 인스턴스입니다
이 예에서는 위치를 '기타'로 변경하는 방법을 세 번째 이전 예의 반복 일정 인스턴스입니다.
--- 탭: 프로토콜 [https://developers.google.com/workspace/calendar/api/guides/recurringevents?hl=ko#%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C] ---
# Updating the original recurring event to trim the instance list:

PUT /calendar/v3/calendars/primary/events/recurringEventId
...

{
  "summary": "Appointment",
  "location": "Somewhere",
  "start": {
    "dateTime": "2011-06-03T10:00:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "end": {
    "dateTime": "2011-06-03T10:25:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "recurrence": [
    "RRULE:FREQ=WEEKLY;UNTIL=20110617T065959Z",
  ],
  "attendees": [
    {
      "email": "attendeeEmail",
      # Other attendee's data...
    },
    # ...
  ],
}


# Creating a new recurring event with the change applied:

POST /calendar/v3/calendars/primary/events
...

{
  "summary": "Appointment",
  "location": "Somewhere else",
  "start": {
    "dateTime": "2011-06-17T10:00:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "end": {
    "dateTime": "2011-06-17T10:25:00.000-07:00",
    "timeZone": "America/Los_Angeles"
  },
  "recurrence": [
    "RRULE:FREQ=WEEKLY;UNTIL=20110617T065959Z",
  ],
  "attendees": [
    {
      "email": "attendeeEmail",
      # Other attendee's data...
    },
    # ...
  ],
}
를 통해 개인정보처리방침을 정의할 수 있습니다.
참고: 이후의 모든 인스턴스를 변경하면 예외가 재설정됩니다. 변경할 수 있습니다
의견 보내기